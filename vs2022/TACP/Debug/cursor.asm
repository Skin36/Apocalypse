; Listing generated by Microsoft (R) Optimizing Compiler Version 19.34.31933.0 

	TITLE	D:\FreeApoc\Apocalypse\vs2022\TACP\Debug\cursor.obj
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	_ufo_cursor
PUBLIC	_cur_surface
PUBLIC	??_C@_0CD@LMJCJAHL@?5?5?5?524?5?5?5?524?5?5?5?5?5?5?5?53?5?5?5?5?5?5?5?5?5?5@ ; `string'
PUBLIC	??_C@_0M@PBCHPDGL@X?5c?5?$CD000000@		; `string'
PUBLIC	??_C@_0M@HNGHCCNN@?4?5c?5?$CDffffff@		; `string'
PUBLIC	??_C@_08BMGCAFP@?5?5c?5None@			; `string'
PUBLIC	??_C@_0BJ@DKEECIGK@X?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5@ ; `string'
PUBLIC	??_C@_0BJ@EPCIGPCG@XX?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5@ ; `string'
PUBLIC	??_C@_0BJ@FOJAJGEG@X?4X?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5@ ; `string'
PUBLIC	??_C@_0BJ@OHGCKKJN@X?4?4X?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5@ ; `string'
PUBLIC	??_C@_0BJ@HDIKHIOL@X?4?4?4X?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5@ ; `string'
PUBLIC	??_C@_0BJ@PPGDIKGC@X?4?4?4?4X?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5@ ; `string'
PUBLIC	??_C@_0BJ@MFONPADM@X?4?4?4?4?4X?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5@ ; `string'
PUBLIC	??_C@_0BJ@POMGGAFN@X?4?4?4?4?4?4X?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5@ ; `string'
PUBLIC	??_C@_0BJ@LLHGMJHN@X?4?4?4?4?4?4?4X?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5@ ; `string'
PUBLIC	??_C@_0BJ@NEIDJMFA@X?4?4?4?4?4?4?4?4X?5?5?5?5?5?5?5?5?5?5?5?5?5?5@ ; `string'
PUBLIC	??_C@_0BJ@JBKBFAIG@X?4?4?4?4?4?4?4?4?4X?5?5?5?5?5?5?5?5?5?5?5?5?5@ ; `string'
PUBLIC	??_C@_0BJ@GMDBPDKL@X?4?4?4?4?4?4?4?4?4?4X?5?5?5?5?5?5?5?5?5?5?5?5@ ; `string'
PUBLIC	??_C@_0BJ@JOGLKELB@X?4?4?4?4?4?4?4?4?4?4?4X?5?5?5?5?5?5?5?5?5?5?5@ ; `string'
PUBLIC	??_C@_0BJ@KMLGECJF@X?4?4?4?4XXXXXXXXX?5?5?5?5?5?5?5?5?5?5@ ; `string'
PUBLIC	??_C@_0BJ@EFFLEJJG@?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5@ ; `string'
PUBLIC	??_C@_03MAIBFBDF@0?00@				; `string'
_BSS	SEGMENT
_ufo_cursor DD	01H DUP (?)
_cur_surface DD	01H DUP (?)
_BSS	ENDS
msvcjmc	SEGMENT
__CD417A16_concurrencysal@h DB 01H
__18C11F8D_sal@h DB 01H
__BD42D05E_vadefs@h DB 01H
__2DC9DF70_vcruntime@h DB 01H
__6569C2CA_corecrt@h DB 01H
__A2143F22_corecrt_stdio_config@h DB 01H
__829E1958_corecrt_wstdio@h DB 01H
__6DFAE8B8_stdio@h DB 01H
__D0DFFAC6_winpackagefamily@h DB 01H
__D0D0F397_winapifamily@h DB 01H
__1ADC5BE7_begin_code@h DB 01H
__8D67BD40_close_code@h DB 01H
__DDEA9788_SDL_platform@h DB 01H
__94A3FDDD_sdkddkver@h DB 01H
__4BD2FD7B_SDL_config@h DB 01H
__C9393812_stddef@h DB 01H
__F19000F7_stdarg@h DB 01H
__EBA520B6_SDL_stdinc@h DB 01H
__C6E6D7CD_SDL_main@h DB 01H
__C819AA9E_SDL_assert@h DB 01H
__D7AB785A_SDL_atomic@h DB 01H
__7CDE7143_SDL_error@h DB 01H
__C264589F_SDL_endian@h DB 01H
__BF5E9F8E_SDL_mutex@h DB 01H
__741AE07E_corecrt_math@h DB 01H
__91D68F2D_math@h DB 01H
__C66E9EB9_vcruntime_startup@h DB 01H
__F6CEABBE_corecrt_startup@h DB 01H
__61BDDCD5_corecrt_wprocess@h DB 01H
__F57902D7_process@h DB 01H
__0C4DD541_SDL_thread@h DB 01H
__1FA23C7D_SDL_rwops@h DB 01H
__4BA16835_SDL_audio@h DB 01H
__A80A68DA_SDL_clipboard@h DB 01H
__99FA516B_intrin0@inl@h DB 01H
__552C563B_setjmp@h DB 01H
__3BCDA13C_mmintrin@h DB 01H
__6C20D4D3_corecrt_malloc@h DB 01H
__20BB4341_malloc@h DB 01H
__AD1CB324_xmmintrin@h DB 01H
__C87E3AE8_emmintrin@h DB 01H
__17DF5261_pmmintrin@h DB 01H
__A70621E3_tmmintrin@h DB 01H
__8E3D3460_smmintrin@h DB 01H
__EB5FBDAC_nmmintrin@h DB 01H
__3EE447E2_wmmintrin@h DB 01H
__F5700AE5_zmmintrin@h DB 01H
__C264A82F_immintrin@h DB 01H
__78A7496A_ammintrin@h DB 01H
__74E2446C_mm3dnow@h DB 01H
__731AEA4C_intrin@h DB 01H
__68067E44_SDL_cpuinfo@h DB 01H
__64E89E41_SDL_pixels@h DB 01H
__BFEA0781_SDL_rect@h DB 01H
__03192F33_SDL_blendmode@h DB 01H
__00CE5C3F_SDL_surface@h DB 01H
__D71AB72D_SDL_video@h DB 01H
__0166E892_SDL_scancode@h DB 01H
__1B40CEEC_SDL_keycode@h DB 01H
__92B90C80_SDL_keyboard@h DB 01H
__41FFAFA3_SDL_mouse@h DB 01H
__9364B404_SDL_joystick@h DB 01H
__049FB5AB_SDL_sensor@h DB 01H
__5B890460_SDL_gamecontroller@h DB 01H
__362302C9_SDL_quit@h DB 01H
__EB78B272_SDL_touch@h DB 01H
__18F5D7F5_SDL_gesture@h DB 01H
__9C10120D_SDL_events@h DB 01H
__D54FBDEE_SDL_filesystem@h DB 01H
__627295A5_SDL_haptic@h DB 01H
__57D222F1_SDL_hints@h DB 01H
__28D3E821_SDL_loadso@h DB 01H
__52E9A77B_SDL_log@h DB 01H
__E1B8B927_SDL_messagebox@h DB 01H
__28C501EE_SDL_metal@h DB 01H
__512DBC7B_SDL_power@h DB 01H
__75481EC3_SDL_render@h DB 01H
__ECCEE624_SDL_shape@h DB 01H
__D14E8A6D_SDL_system@h DB 01H
__596BF456_SDL_timer@h DB 01H
__130AA0EB_SDL_version@h DB 01H
__A8160445_SDL_locale@h DB 01H
__C1EAB8A4_SDL_misc@h DB 01H
__0E484B1D_SDL@h DB 01H
__202AAE76_cursor@h DB 01H
__B7F877FE_cursor@c DB 01H
msvcjmc	ENDS
;	COMDAT ??_C@_03MAIBFBDF@0?00@
CONST	SEGMENT
??_C@_03MAIBFBDF@0?00@ DB '0,0', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@EFFLEJJG@?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5@
CONST	SEGMENT
??_C@_0BJ@EFFLEJJG@?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5@ DB ' '
	DB	'                       ', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@KMLGECJF@X?4?4?4?4XXXXXXXXX?5?5?5?5?5?5?5?5?5?5@
CONST	SEGMENT
??_C@_0BJ@KMLGECJF@X?4?4?4?4XXXXXXXXX?5?5?5?5?5?5?5?5?5?5@ DB 'X....XXXXX'
	DB	'XXXX          ', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@JOGLKELB@X?4?4?4?4?4?4?4?4?4?4?4X?5?5?5?5?5?5?5?5?5?5?5@
CONST	SEGMENT
??_C@_0BJ@JOGLKELB@X?4?4?4?4?4?4?4?4?4?4?4X?5?5?5?5?5?5?5?5?5?5?5@ DB 'X.'
	DB	'..........X           ', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@GMDBPDKL@X?4?4?4?4?4?4?4?4?4?4X?5?5?5?5?5?5?5?5?5?5?5?5@
CONST	SEGMENT
??_C@_0BJ@GMDBPDKL@X?4?4?4?4?4?4?4?4?4?4X?5?5?5?5?5?5?5?5?5?5?5?5@ DB 'X.'
	DB	'.........X            ', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@JBKBFAIG@X?4?4?4?4?4?4?4?4?4X?5?5?5?5?5?5?5?5?5?5?5?5?5@
CONST	SEGMENT
??_C@_0BJ@JBKBFAIG@X?4?4?4?4?4?4?4?4?4X?5?5?5?5?5?5?5?5?5?5?5?5?5@ DB 'X.'
	DB	'........X             ', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@NEIDJMFA@X?4?4?4?4?4?4?4?4X?5?5?5?5?5?5?5?5?5?5?5?5?5?5@
CONST	SEGMENT
??_C@_0BJ@NEIDJMFA@X?4?4?4?4?4?4?4?4X?5?5?5?5?5?5?5?5?5?5?5?5?5?5@ DB 'X.'
	DB	'.......X              ', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@LLHGMJHN@X?4?4?4?4?4?4?4X?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5@
CONST	SEGMENT
??_C@_0BJ@LLHGMJHN@X?4?4?4?4?4?4?4X?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5@ DB 'X.'
	DB	'......X               ', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@POMGGAFN@X?4?4?4?4?4?4X?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5@
CONST	SEGMENT
??_C@_0BJ@POMGGAFN@X?4?4?4?4?4?4X?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5@ DB 'X.'
	DB	'.....X                ', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@MFONPADM@X?4?4?4?4?4X?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5@
CONST	SEGMENT
??_C@_0BJ@MFONPADM@X?4?4?4?4?4X?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5@ DB 'X.'
	DB	'....X                 ', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@PPGDIKGC@X?4?4?4?4X?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5@
CONST	SEGMENT
??_C@_0BJ@PPGDIKGC@X?4?4?4?4X?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5@ DB 'X.'
	DB	'...X                  ', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@HDIKHIOL@X?4?4?4X?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5@
CONST	SEGMENT
??_C@_0BJ@HDIKHIOL@X?4?4?4X?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5@ DB 'X.'
	DB	'..X                   ', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@OHGCKKJN@X?4?4X?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5@
CONST	SEGMENT
??_C@_0BJ@OHGCKKJN@X?4?4X?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5@ DB 'X.'
	DB	'.X                    ', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@FOJAJGEG@X?4X?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5@
CONST	SEGMENT
??_C@_0BJ@FOJAJGEG@X?4X?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5@ DB 'X.'
	DB	'X                     ', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@EPCIGPCG@XX?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5@
CONST	SEGMENT
??_C@_0BJ@EPCIGPCG@XX?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5@ DB 'XX'
	DB	'                      ', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@DKEECIGK@X?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5@
CONST	SEGMENT
??_C@_0BJ@DKEECIGK@X?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5@ DB 'X'
	DB	'                       ', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08BMGCAFP@?5?5c?5None@
CONST	SEGMENT
??_C@_08BMGCAFP@?5?5c?5None@ DB '  c None', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@HNGHCCNN@?4?5c?5?$CDffffff@
CONST	SEGMENT
??_C@_0M@HNGHCCNN@?4?5c?5?$CDffffff@ DB '. c #ffffff', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@PBCHPDGL@X?5c?5?$CD000000@
CONST	SEGMENT
??_C@_0M@PBCHPDGL@X?5c?5?$CD000000@ DB 'X c #000000', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@LMJCJAHL@?5?5?5?524?5?5?5?524?5?5?5?5?5?5?5?53?5?5?5?5?5?5?5?5?5?5@
CONST	SEGMENT
??_C@_0CD@LMJCJAHL@?5?5?5?524?5?5?5?524?5?5?5?5?5?5?5?53?5?5?5?5?5?5?5?5?5?5@ DB ' '
	DB	'   24    24        3            1', 00H	; `string'
CONST	ENDS
PUBLIC	___local_stdio_printf_options
PUBLIC	___local_stdio_scanf_options
PUBLIC	__vfprintf_l
PUBLIC	_printf
PUBLIC	__vsscanf_s_l
PUBLIC	_vsscanf_s
PUBLIC	_sscanf_s
PUBLIC	_cursor_init
PUBLIC	_draw_cursor
PUBLIC	_curr_exit
PUBLIC	_set_cur_palette
PUBLIC	__JustMyCode_Default
PUBLIC	??_C@_05KABNCBHK@?$CFd?0?$CFd@			; `string'
PUBLIC	??_C@_0BE@GNIHIKIF@ERROR?3?5Init?5cursor?4@	; `string'
PUBLIC	??_C@_04ILNEAJIO@?$CFs?5?6@			; `string'
EXTRN	___report_rangecheckfailure:PROC
EXTRN	__imp____acrt_iob_func:PROC
EXTRN	__imp____stdio_common_vfprintf:PROC
EXTRN	__imp____stdio_common_vsscanf:PROC
EXTRN	_SDL_SetPaletteColors:PROC
EXTRN	_SDL_CreateRGBSurfaceFrom:PROC
EXTRN	_SDL_FreeSurface:PROC
EXTRN	_SDL_SetSurfacePalette:PROC
EXTRN	_SDL_CreateCursor:PROC
EXTRN	_SDL_CreateColorCursor:PROC
EXTRN	_SDL_SetCursor:PROC
EXTRN	_SDL_FreeCursor:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__CheckForDebuggerJustMyCode@4:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	_current_pal:DWORD
EXTRN	___security_cookie:DWORD
_DATA	SEGMENT
COMM	?_OptionsStorage@?1??__local_stdio_printf_options@@9@9:QWORD							; `__local_stdio_printf_options'::`2'::_OptionsStorage
COMM	?_OptionsStorage@?1??__local_stdio_scanf_options@@9@9:QWORD							; `__local_stdio_scanf_options'::`2'::_OptionsStorage
_DATA	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_C@_04ILNEAJIO@?$CFs?5?6@
CONST	SEGMENT
??_C@_04ILNEAJIO@?$CFs?5?6@ DB '%s ', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@GNIHIKIF@ERROR?3?5Init?5cursor?4@
CONST	SEGMENT
??_C@_0BE@GNIHIKIF@ERROR?3?5Init?5cursor?4@ DB 'ERROR: Init cursor.', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_05KABNCBHK@?$CFd?0?$CFd@
CONST	SEGMENT
??_C@_05KABNCBHK@?$CFd?0?$CFd@ DB '%d,%d', 00H		; `string'
CONST	ENDS
_DATA	SEGMENT
_cur_image DD	FLAT:??_C@_0CD@LMJCJAHL@?5?5?5?524?5?5?5?524?5?5?5?5?5?5?5?53?5?5?5?5?5?5?5?5?5?5@
	DD	FLAT:??_C@_0M@PBCHPDGL@X?5c?5?$CD000000@
	DD	FLAT:??_C@_0M@HNGHCCNN@?4?5c?5?$CDffffff@
	DD	FLAT:??_C@_08BMGCAFP@?5?5c?5None@
	DD	FLAT:??_C@_0BJ@DKEECIGK@X?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5@
	DD	FLAT:??_C@_0BJ@EPCIGPCG@XX?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5@
	DD	FLAT:??_C@_0BJ@FOJAJGEG@X?4X?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5@
	DD	FLAT:??_C@_0BJ@OHGCKKJN@X?4?4X?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5@
	DD	FLAT:??_C@_0BJ@HDIKHIOL@X?4?4?4X?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5@
	DD	FLAT:??_C@_0BJ@PPGDIKGC@X?4?4?4?4X?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5@
	DD	FLAT:??_C@_0BJ@MFONPADM@X?4?4?4?4?4X?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5@
	DD	FLAT:??_C@_0BJ@POMGGAFN@X?4?4?4?4?4?4X?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5@
	DD	FLAT:??_C@_0BJ@LLHGMJHN@X?4?4?4?4?4?4?4X?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5@
	DD	FLAT:??_C@_0BJ@NEIDJMFA@X?4?4?4?4?4?4?4?4X?5?5?5?5?5?5?5?5?5?5?5?5?5?5@
	DD	FLAT:??_C@_0BJ@JBKBFAIG@X?4?4?4?4?4?4?4?4?4X?5?5?5?5?5?5?5?5?5?5?5?5?5@
	DD	FLAT:??_C@_0BJ@GMDBPDKL@X?4?4?4?4?4?4?4?4?4?4X?5?5?5?5?5?5?5?5?5?5?5?5@
	DD	FLAT:??_C@_0BJ@JOGLKELB@X?4?4?4?4?4?4?4?4?4?4?4X?5?5?5?5?5?5?5?5?5?5?5@
	DD	FLAT:??_C@_0BJ@KMLGECJF@X?4?4?4?4XXXXXXXXX?5?5?5?5?5?5?5?5?5?5@
	DD	FLAT:??_C@_0BJ@HDIKHIOL@X?4?4?4X?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5@
	DD	FLAT:??_C@_0BJ@OHGCKKJN@X?4?4X?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5@
	DD	FLAT:??_C@_0BJ@FOJAJGEG@X?4X?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5@
	DD	FLAT:??_C@_0BJ@EPCIGPCG@XX?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5@
	DD	FLAT:??_C@_0BJ@DKEECIGK@X?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5@
	DD	FLAT:??_C@_0BJ@EFFLEJJG@?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5@
	DD	FLAT:??_C@_0BJ@EFFLEJJG@?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5@
	DD	FLAT:??_C@_0BJ@EFFLEJJG@?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5@
	DD	FLAT:??_C@_0BJ@EFFLEJJG@?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5@
	DD	FLAT:??_C@_0BJ@EFFLEJJG@?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5@
	DD	FLAT:??_C@_03MAIBFBDF@0?00@
_DATA	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	025H
	DW	01cdH
voltbl	ENDS
; Function compile flags: /Odt
;	COMDAT __JustMyCode_Default
_TEXT	SEGMENT
__JustMyCode_Default PROC				; COMDAT
	push	ebp
	mov	ebp, esp
	pop	ebp
	ret	0
__JustMyCode_Default ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\FreeApoc\Apocalypse\TACP\C_Sources\cursor.c
;	COMDAT _init_system_cursor
_TEXT	SEGMENT
tv91 = -480						; size = 4
$T1 = -472						; size = 4
_hot_y$ = -268						; size = 4
_hot_x$ = -256						; size = 4
_mask$ = -244						; size = 96
_data$ = -140						; size = 96
_col$ = -36						; size = 4
_row$ = -24						; size = 4
_i$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_image$ = 8						; size = 4
_init_system_cursor PROC				; COMDAT

; 96   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 480				; 000001e0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-288]
	mov	ecx, 72					; 00000048H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	ecx, OFFSET __B7F877FE_cursor@c
	call	@__CheckForDebuggerJustMyCode@4

; 97   :     int i, row, col;
; 98   :     uint8_t data[4 * 24];
; 99   :     uint8_t mask[4 * 24];
; 100  :     int hot_x, hot_y;
; 101  : 
; 102  :     i = -1;

	mov	DWORD PTR _i$[ebp], -1

; 103  :     for (row = 0; row < 24; ++row) {

	mov	DWORD PTR _row$[ebp], 0
	jmp	SHORT $LN4@init_syste
$LN2@init_syste:
	mov	eax, DWORD PTR _row$[ebp]
	add	eax, 1
	mov	DWORD PTR _row$[ebp], eax
$LN4@init_syste:
	cmp	DWORD PTR _row$[ebp], 24		; 00000018H
	jge	$LN3@init_syste

; 104  :         for (col = 0; col < 24; ++col) {

	mov	DWORD PTR _col$[ebp], 0
	jmp	SHORT $LN7@init_syste
$LN5@init_syste:
	mov	eax, DWORD PTR _col$[ebp]
	add	eax, 1
	mov	DWORD PTR _col$[ebp], eax
$LN7@init_syste:
	cmp	DWORD PTR _col$[ebp], 24		; 00000018H
	jge	$LN6@init_syste

; 105  :             if (col % 8) {

	mov	eax, DWORD PTR _col$[ebp]
	and	eax, -2147483641			; 80000007H
	jns	SHORT $LN24@init_syste
	dec	eax
	or	eax, -8					; fffffff8H
	inc	eax
$LN24@init_syste:
	test	eax, eax
	je	SHORT $LN10@init_syste

; 106  :                 data[i] <<= 1;

	mov	eax, DWORD PTR _i$[ebp]
	mov	cl, BYTE PTR _data$[ebp+eax]
	shl	cl, 1
	mov	edx, DWORD PTR _i$[ebp]
	mov	BYTE PTR _data$[ebp+edx], cl

; 107  :                 mask[i] <<= 1;

	mov	eax, DWORD PTR _i$[ebp]
	mov	cl, BYTE PTR _mask$[ebp+eax]
	shl	cl, 1
	mov	edx, DWORD PTR _i$[ebp]
	mov	BYTE PTR _mask$[ebp+edx], cl

; 108  :             }

	jmp	SHORT $LN11@init_syste
$LN10@init_syste:

; 109  :             else {
; 110  :                 ++i;

	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 111  :                 data[i] = mask[i] = 0;

	mov	eax, DWORD PTR _i$[ebp]
	mov	DWORD PTR $T1[ebp], eax
	cmp	DWORD PTR $T1[ebp], 96			; 00000060H
	jae	SHORT $LN16@init_syste
	jmp	SHORT $LN17@init_syste
$LN16@init_syste:
	call	___report_rangecheckfailure
$LN17@init_syste:
	mov	ecx, DWORD PTR $T1[ebp]
	mov	BYTE PTR _mask$[ebp+ecx], 0
	mov	edx, DWORD PTR _i$[ebp]
	mov	BYTE PTR _data$[ebp+edx], 0
$LN11@init_syste:

; 112  :             }
; 113  :             switch (cur_image[4 + row][col]) {

	mov	eax, DWORD PTR _row$[ebp]
	mov	ecx, DWORD PTR _cur_image[eax*4+16]
	mov	edx, DWORD PTR _col$[ebp]
	mov	al, BYTE PTR [ecx+edx]
	mov	BYTE PTR tv91[ebp], al
	cmp	BYTE PTR tv91[ebp], 46			; 0000002eH
	je	SHORT $LN13@init_syste
	cmp	BYTE PTR tv91[ebp], 88			; 00000058H
	je	SHORT $LN12@init_syste
	jmp	SHORT $LN8@init_syste
$LN12@init_syste:

; 114  :             case 'X':
; 115  :                 data[i] |= 0x01;

	mov	eax, DWORD PTR _i$[ebp]
	movzx	ecx, BYTE PTR _data$[ebp+eax]
	or	ecx, 1
	mov	edx, DWORD PTR _i$[ebp]
	mov	BYTE PTR _data$[ebp+edx], cl

; 116  :                 mask[i] |= 0x01;

	mov	eax, DWORD PTR _i$[ebp]
	movzx	ecx, BYTE PTR _mask$[ebp+eax]
	or	ecx, 1
	mov	edx, DWORD PTR _i$[ebp]
	mov	BYTE PTR _mask$[ebp+edx], cl

; 117  :                 break;

	jmp	SHORT $LN8@init_syste
$LN13@init_syste:

; 118  :             case '.':
; 119  :                 mask[i] |= 0x01;

	mov	eax, DWORD PTR _i$[ebp]
	movzx	ecx, BYTE PTR _mask$[ebp+eax]
	or	ecx, 1
	mov	edx, DWORD PTR _i$[ebp]
	mov	BYTE PTR _mask$[ebp+edx], cl
$LN8@init_syste:

; 120  :                 break;
; 121  :             case ' ':
; 122  :                 break;
; 123  :             }
; 124  :         }

	jmp	$LN5@init_syste
$LN6@init_syste:

; 125  :     }

	jmp	$LN2@init_syste
$LN3@init_syste:

; 126  :     sscanf_s(cur_image[4 + row], "%d,%d", &hot_x, &hot_y);

	lea	eax, DWORD PTR _hot_y$[ebp]
	push	eax
	lea	ecx, DWORD PTR _hot_x$[ebp]
	push	ecx
	push	OFFSET ??_C@_05KABNCBHK@?$CFd?0?$CFd@
	mov	edx, DWORD PTR _row$[ebp]
	mov	eax, DWORD PTR _cur_image[edx*4+16]
	push	eax
	call	_sscanf_s
	add	esp, 16					; 00000010H

; 127  :     return SDL_CreateCursor(data, mask, 24, 24, hot_x, hot_y);

	mov	eax, DWORD PTR _hot_y$[ebp]
	push	eax
	mov	ecx, DWORD PTR _hot_x$[ebp]
	push	ecx
	push	24					; 00000018H
	push	24					; 00000018H
	lea	edx, DWORD PTR _mask$[ebp]
	push	edx
	lea	eax, DWORD PTR _data$[ebp]
	push	eax
	call	_SDL_CreateCursor
	add	esp, 24					; 00000018H
$LN15@init_syste:

; 128  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN23@init_syste
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 480				; 000001e0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN23@init_syste:
	DD	4
	DD	$LN22@init_syste
$LN22@init_syste:
	DD	-140					; ffffff74H
	DD	96					; 00000060H
	DD	$LN18@init_syste
	DD	-244					; ffffff0cH
	DD	96					; 00000060H
	DD	$LN19@init_syste
	DD	-256					; ffffff00H
	DD	4
	DD	$LN20@init_syste
	DD	-268					; fffffef4H
	DD	4
	DD	$LN21@init_syste
$LN21@init_syste:
	DB	104					; 00000068H
	DB	111					; 0000006fH
	DB	116					; 00000074H
	DB	95					; 0000005fH
	DB	121					; 00000079H
	DB	0
$LN20@init_syste:
	DB	104					; 00000068H
	DB	111					; 0000006fH
	DB	116					; 00000074H
	DB	95					; 0000005fH
	DB	120					; 00000078H
	DB	0
$LN19@init_syste:
	DB	109					; 0000006dH
	DB	97					; 00000061H
	DB	115					; 00000073H
	DB	107					; 0000006bH
	DB	0
$LN18@init_syste:
	DB	100					; 00000064H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	0
_init_system_cursor ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\FreeApoc\Apocalypse\TACP\C_Sources\cursor.c
;	COMDAT _set_cur_palette
_TEXT	SEGMENT
_i$1 = -56						; size = 4
_n$ = -44						; size = 4
_ret_val$ = -32						; size = 4
_p$ = -20						; size = 4
_color$ = -8						; size = 4
_set_cur_palette PROC					; COMDAT

; 65   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 252				; 000000fcH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-60]
	mov	ecx, 15					; 0000000fH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __B7F877FE_cursor@c
	call	@__CheckForDebuggerJustMyCode@4

; 66   : 	SDL_Color color;
; 67   : 	SDL_Palette* p = cur_surface->format->palette;

	mov	eax, DWORD PTR _cur_surface
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR _p$[ebp], edx

; 68   : 	int ret_val = 0;

	mov	DWORD PTR _ret_val$[ebp], 0

; 69   : 
; 70   : 	int n = 0;

	mov	DWORD PTR _n$[ebp], 0

; 71   : 	for (int i = 0; i < 256; i++)

	mov	DWORD PTR _i$1[ebp], 0
	jmp	SHORT $LN4@set_cur_pa
$LN2@set_cur_pa:
	mov	eax, DWORD PTR _i$1[ebp]
	add	eax, 1
	mov	DWORD PTR _i$1[ebp], eax
$LN4@set_cur_pa:
	cmp	DWORD PTR _i$1[ebp], 256		; 00000100H
	jge	$LN3@set_cur_pa

; 72   : 	{
; 73   : 		if (n == 0)

	cmp	DWORD PTR _n$[ebp], 0
	jne	$LN5@set_cur_pa

; 74   : 		{
; 75   : 			color.r = (current_pal[n * 3] << 2 | (current_pal[n * 3] >> 4 & 0x3));

	imul	eax, DWORD PTR _n$[ebp], 3
	mov	ecx, DWORD PTR _current_pal
	movzx	edx, BYTE PTR [ecx+eax]
	shl	edx, 2
	imul	eax, DWORD PTR _n$[ebp], 3
	mov	ecx, DWORD PTR _current_pal
	movzx	eax, BYTE PTR [ecx+eax]
	sar	eax, 4
	and	eax, 3
	or	edx, eax
	mov	BYTE PTR _color$[ebp], dl

; 76   : 			color.g = (current_pal[n * 3 + 1] << 2 | (current_pal[n * 3 + 1] >> 4 & 0x3));

	imul	eax, DWORD PTR _n$[ebp], 3
	mov	ecx, DWORD PTR _current_pal
	movzx	edx, BYTE PTR [ecx+eax+1]
	shl	edx, 2
	imul	eax, DWORD PTR _n$[ebp], 3
	mov	ecx, DWORD PTR _current_pal
	movzx	eax, BYTE PTR [ecx+eax+1]
	sar	eax, 4
	and	eax, 3
	or	edx, eax
	mov	BYTE PTR _color$[ebp+1], dl

; 77   : 			color.b = (current_pal[n * 3 + 2] << 2 | (current_pal[n * 3 + 2] >> 4 & 0x3));

	imul	eax, DWORD PTR _n$[ebp], 3
	mov	ecx, DWORD PTR _current_pal
	movzx	edx, BYTE PTR [ecx+eax+2]
	shl	edx, 2
	imul	eax, DWORD PTR _n$[ebp], 3
	mov	ecx, DWORD PTR _current_pal
	movzx	eax, BYTE PTR [ecx+eax+2]
	sar	eax, 4
	and	eax, 3
	or	edx, eax
	mov	BYTE PTR _color$[ebp+2], dl

; 78   : 			color.a = 0;

	mov	BYTE PTR _color$[ebp+3], 0

; 79   : 		}

	jmp	$LN6@set_cur_pa
$LN5@set_cur_pa:

; 80   : 		else
; 81   : 		{ 
; 82   : 			color.r = (current_pal[n * 3] << 2 | (current_pal[n * 3] >> 4 & 0x3));

	imul	eax, DWORD PTR _n$[ebp], 3
	mov	ecx, DWORD PTR _current_pal
	movzx	edx, BYTE PTR [ecx+eax]
	shl	edx, 2
	imul	eax, DWORD PTR _n$[ebp], 3
	mov	ecx, DWORD PTR _current_pal
	movzx	eax, BYTE PTR [ecx+eax]
	sar	eax, 4
	and	eax, 3
	or	edx, eax
	mov	BYTE PTR _color$[ebp], dl

; 83   : 			color.g = (current_pal[n * 3 + 1] << 2 | (current_pal[n * 3 + 1] >> 4 & 0x3));

	imul	eax, DWORD PTR _n$[ebp], 3
	mov	ecx, DWORD PTR _current_pal
	movzx	edx, BYTE PTR [ecx+eax+1]
	shl	edx, 2
	imul	eax, DWORD PTR _n$[ebp], 3
	mov	ecx, DWORD PTR _current_pal
	movzx	eax, BYTE PTR [ecx+eax+1]
	sar	eax, 4
	and	eax, 3
	or	edx, eax
	mov	BYTE PTR _color$[ebp+1], dl

; 84   : 			color.b = (current_pal[n * 3 + 2] << 2 | (current_pal[n * 3 + 2] >> 4 & 0x3));

	imul	eax, DWORD PTR _n$[ebp], 3
	mov	ecx, DWORD PTR _current_pal
	movzx	edx, BYTE PTR [ecx+eax+2]
	shl	edx, 2
	imul	eax, DWORD PTR _n$[ebp], 3
	mov	ecx, DWORD PTR _current_pal
	movzx	eax, BYTE PTR [ecx+eax+2]
	sar	eax, 4
	and	eax, 3
	or	edx, eax
	mov	BYTE PTR _color$[ebp+2], dl

; 85   : 			color.a = 255;

	mov	BYTE PTR _color$[ebp+3], 255		; 000000ffH
$LN6@set_cur_pa:

; 86   :         }
; 87   : 		n++;

	mov	eax, DWORD PTR _n$[ebp]
	add	eax, 1
	mov	DWORD PTR _n$[ebp], eax

; 88   : 		ret_val |= SDL_SetPaletteColors(p, &color, i, 1);

	push	1
	mov	eax, DWORD PTR _i$1[ebp]
	push	eax
	lea	ecx, DWORD PTR _color$[ebp]
	push	ecx
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	call	_SDL_SetPaletteColors
	add	esp, 16					; 00000010H
	or	eax, DWORD PTR _ret_val$[ebp]
	mov	DWORD PTR _ret_val$[ebp], eax

; 89   : 	}

	jmp	$LN2@set_cur_pa
$LN3@set_cur_pa:

; 90   : 	ret_val |= SDL_SetSurfacePalette(cur_surface, p);

	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	mov	ecx, DWORD PTR _cur_surface
	push	ecx
	call	_SDL_SetSurfacePalette
	add	esp, 8
	or	eax, DWORD PTR _ret_val$[ebp]
	mov	DWORD PTR _ret_val$[ebp], eax

; 91   : 
; 92   : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN10@set_cur_pa
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 252				; 000000fcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN10@set_cur_pa:
	DD	1
	DD	$LN9@set_cur_pa
$LN9@set_cur_pa:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN8@set_cur_pa
$LN8@set_cur_pa:
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	108					; 0000006cH
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	0
_set_cur_palette ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\FreeApoc\Apocalypse\TACP\C_Sources\cursor.c
;	COMDAT _curr_exit
_TEXT	SEGMENT
_curr_exit PROC						; COMDAT

; 149  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	mov	edi, ebp
	xor	ecx, ecx
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __B7F877FE_cursor@c
	call	@__CheckForDebuggerJustMyCode@4

; 150  : 	SDL_FreeCursor(ufo_cursor);

	mov	eax, DWORD PTR _ufo_cursor
	push	eax
	call	_SDL_FreeCursor
	add	esp, 4

; 151  : 	SDL_FreeSurface(cur_surface);

	mov	eax, DWORD PTR _cur_surface
	push	eax
	call	_SDL_FreeSurface
	add	esp, 4

; 152  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_curr_exit ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\FreeApoc\Apocalypse\TACP\C_Sources\cursor.c
;	COMDAT _draw_cursor
_TEXT	SEGMENT
_cur_img$ = 8						; size = 4
_draw_cursor PROC					; COMDAT

; 53   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	mov	edi, ebp
	xor	ecx, ecx
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __B7F877FE_cursor@c
	call	@__CheckForDebuggerJustMyCode@4

; 54   : 	
; 55   :     cur_surface = SDL_CreateRGBSurfaceFrom(cur_img, 24, 24, 8, 24, 0, 0, 0,0);

	push	0
	push	0
	push	0
	push	0
	push	24					; 00000018H
	push	8
	push	24					; 00000018H
	push	24					; 00000018H
	mov	eax, DWORD PTR _cur_img$[ebp]
	push	eax
	call	_SDL_CreateRGBSurfaceFrom
	add	esp, 36					; 00000024H
	mov	DWORD PTR _cur_surface, eax

; 56   :     set_cur_palette();

	call	_set_cur_palette

; 57   :     ufo_cursor = SDL_CreateColorCursor(cur_surface, 0, 0);

	push	0
	push	0
	mov	eax, DWORD PTR _cur_surface
	push	eax
	call	_SDL_CreateColorCursor
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _ufo_cursor, eax

; 58   :     SDL_SetCursor(ufo_cursor);

	mov	eax, DWORD PTR _ufo_cursor
	push	eax
	call	_SDL_SetCursor
	add	esp, 4

; 59   :        
; 60   :     return 1;

	mov	eax, 1

; 61   : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_draw_cursor ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\FreeApoc\Apocalypse\TACP\C_Sources\cursor.c
;	COMDAT _cursor_init
_TEXT	SEGMENT
_ret_val$ = -8						; size = 4
_cursor_init PROC					; COMDAT

; 132  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-12]
	mov	ecx, 3
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __B7F877FE_cursor@c
	call	@__CheckForDebuggerJustMyCode@4

; 133  :     int ret_val = 0;

	mov	DWORD PTR _ret_val$[ebp], 0

; 134  : 
; 135  :     //init_system_cursor();
; 136  :     if (ret_val)

	cmp	DWORD PTR _ret_val$[ebp], 0
	je	SHORT $LN2@cursor_ini

; 137  :     {
; 138  :         printf("%s \n", "ERROR: Init cursor.");

	push	OFFSET ??_C@_0BE@GNIHIKIF@ERROR?3?5Init?5cursor?4@
	push	OFFSET ??_C@_04ILNEAJIO@?$CFs?5?6@
	call	_printf
	add	esp, 8
$LN2@cursor_ini:

; 139  :     }
; 140  : 
; 141  :     ufo_cursor = init_system_cursor(cur_image);

	push	OFFSET _cur_image
	call	_init_system_cursor
	add	esp, 4
	mov	DWORD PTR _ufo_cursor, eax

; 142  :     SDL_SetCursor(ufo_cursor);

	mov	eax, DWORD PTR _ufo_cursor
	push	eax
	call	_SDL_SetCursor
	add	esp, 4

; 143  :     return ret_val;

	mov	eax, DWORD PTR _ret_val$[ebp]

; 144  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_cursor_init ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.19041.0\ucrt\stdio.h
;	COMDAT _sscanf_s
_TEXT	SEGMENT
__ArgList$ = -20					; size = 4
__Result$ = -8						; size = 4
__Buffer$ = 8						; size = 4
__Format$ = 12						; size = 4
_sscanf_s PROC						; COMDAT

; 2286 :         {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-24]
	mov	ecx, 6
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __6DFAE8B8_stdio@h
	call	@__CheckForDebuggerJustMyCode@4

; 2287 :             int _Result;
; 2288 :             va_list _ArgList;
; 2289 :             __crt_va_start(_ArgList, _Format);

	lea	eax, DWORD PTR __Format$[ebp+4]
	mov	DWORD PTR __ArgList$[ebp], eax

; 2290 : 
; 2291 :             _Result = vsscanf_s(_Buffer, _Format, _ArgList);

	mov	eax, DWORD PTR __ArgList$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Format$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Buffer$[ebp]
	push	edx
	call	_vsscanf_s
	add	esp, 12					; 0000000cH
	mov	DWORD PTR __Result$[ebp], eax

; 2292 : 
; 2293 :             __crt_va_end(_ArgList);

	mov	DWORD PTR __ArgList$[ebp], 0

; 2294 :             return _Result;

	mov	eax, DWORD PTR __Result$[ebp]

; 2295 :         }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_sscanf_s ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.19041.0\ucrt\stdio.h
;	COMDAT _vsscanf_s
_TEXT	SEGMENT
__Buffer$ = 8						; size = 4
__Format$ = 12						; size = 4
__ArgList$ = 16						; size = 4
_vsscanf_s PROC						; COMDAT

; 2204 :         {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	mov	edi, ebp
	xor	ecx, ecx
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __6DFAE8B8_stdio@h
	call	@__CheckForDebuggerJustMyCode@4

; 2205 :             return _vsscanf_s_l(_Buffer, _Format, NULL, _ArgList);

	mov	eax, DWORD PTR __ArgList$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR __Format$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Buffer$[ebp]
	push	edx
	call	__vsscanf_s_l
	add	esp, 16					; 00000010H

; 2206 :         }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_vsscanf_s ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.19041.0\ucrt\stdio.h
;	COMDAT __vsscanf_s_l
_TEXT	SEGMENT
__Buffer$ = 8						; size = 4
__Format$ = 12						; size = 4
__Locale$ = 16						; size = 4
__ArgList$ = 20						; size = 4
__vsscanf_s_l PROC					; COMDAT

; 2183 :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	mov	edi, ebp
	xor	ecx, ecx
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __6DFAE8B8_stdio@h
	call	@__CheckForDebuggerJustMyCode@4

; 2184 :         return __stdio_common_vsscanf(

	mov	esi, esp
	mov	eax, DWORD PTR __ArgList$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Locale$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Format$[ebp]
	push	edx
	push	-1
	mov	eax, DWORD PTR __Buffer$[ebp]
	push	eax
	call	___local_stdio_scanf_options
	mov	ecx, DWORD PTR [eax]
	or	ecx, 1
	mov	edx, DWORD PTR [eax+4]
	push	edx
	push	ecx
	call	DWORD PTR __imp____stdio_common_vsscanf
	add	esp, 28					; 0000001cH
	cmp	esi, esp
	call	__RTC_CheckEsp

; 2185 :             _CRT_INTERNAL_LOCAL_SCANF_OPTIONS | _CRT_INTERNAL_SCANF_SECURECRT,
; 2186 :             _Buffer, (size_t)-1, _Format, _Locale, _ArgList);
; 2187 :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__vsscanf_s_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.19041.0\ucrt\stdio.h
;	COMDAT _printf
_TEXT	SEGMENT
__ArgList$ = -20					; size = 4
__Result$ = -8						; size = 4
__Format$ = 8						; size = 4
_printf	PROC						; COMDAT

; 956  :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-24]
	mov	ecx, 6
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __6DFAE8B8_stdio@h
	call	@__CheckForDebuggerJustMyCode@4

; 957  :         int _Result;
; 958  :         va_list _ArgList;
; 959  :         __crt_va_start(_ArgList, _Format);

	lea	eax, DWORD PTR __Format$[ebp+4]
	mov	DWORD PTR __ArgList$[ebp], eax

; 960  :         _Result = _vfprintf_l(stdout, _Format, NULL, _ArgList);

	mov	eax, DWORD PTR __ArgList$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR __Format$[ebp]
	push	ecx
	mov	esi, esp
	push	1
	call	DWORD PTR __imp____acrt_iob_func
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	eax
	call	__vfprintf_l
	add	esp, 16					; 00000010H
	mov	DWORD PTR __Result$[ebp], eax

; 961  :         __crt_va_end(_ArgList);

	mov	DWORD PTR __ArgList$[ebp], 0

; 962  :         return _Result;

	mov	eax, DWORD PTR __Result$[ebp]

; 963  :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_printf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.19041.0\ucrt\stdio.h
;	COMDAT __vfprintf_l
_TEXT	SEGMENT
__Stream$ = 8						; size = 4
__Format$ = 12						; size = 4
__Locale$ = 16						; size = 4
__ArgList$ = 20						; size = 4
__vfprintf_l PROC					; COMDAT

; 644  :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	mov	edi, ebp
	xor	ecx, ecx
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __6DFAE8B8_stdio@h
	call	@__CheckForDebuggerJustMyCode@4

; 645  :         return __stdio_common_vfprintf(_CRT_INTERNAL_LOCAL_PRINTF_OPTIONS, _Stream, _Format, _Locale, _ArgList);

	mov	esi, esp
	mov	eax, DWORD PTR __ArgList$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Locale$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Format$[ebp]
	push	edx
	mov	eax, DWORD PTR __Stream$[ebp]
	push	eax
	call	___local_stdio_printf_options
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	call	DWORD PTR __imp____stdio_common_vfprintf
	add	esp, 24					; 00000018H
	cmp	esi, esp
	call	__RTC_CheckEsp

; 646  :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__vfprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.19041.0\ucrt\corecrt_stdio_config.h
;	COMDAT ___local_stdio_scanf_options
_TEXT	SEGMENT
___local_stdio_scanf_options PROC			; COMDAT

; 100  :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	mov	edi, ebp
	xor	ecx, ecx
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __A2143F22_corecrt_stdio_config@h
	call	@__CheckForDebuggerJustMyCode@4

; 101  :         static unsigned __int64 _OptionsStorage;
; 102  :         return &_OptionsStorage;

	mov	eax, OFFSET ?_OptionsStorage@?1??__local_stdio_scanf_options@@9@9 ; `__local_stdio_scanf_options'::`2'::_OptionsStorage

; 103  :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
___local_stdio_scanf_options ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.19041.0\ucrt\corecrt_stdio_config.h
;	COMDAT ___local_stdio_printf_options
_TEXT	SEGMENT
___local_stdio_printf_options PROC			; COMDAT

; 90   :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	mov	edi, ebp
	xor	ecx, ecx
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __A2143F22_corecrt_stdio_config@h
	call	@__CheckForDebuggerJustMyCode@4

; 91   :         static unsigned __int64 _OptionsStorage;
; 92   :         return &_OptionsStorage;

	mov	eax, OFFSET ?_OptionsStorage@?1??__local_stdio_printf_options@@9@9 ; `__local_stdio_printf_options'::`2'::_OptionsStorage

; 93   :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
___local_stdio_printf_options ENDP
_TEXT	ENDS
END
