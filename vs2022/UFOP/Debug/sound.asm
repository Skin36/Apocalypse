; Listing generated by Microsoft (R) Optimizing Compiler Version 19.34.31933.0 

	TITLE	D:\FreeApoc\Apocalypse\vs2022\UFOP\Debug\sound.obj
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	_snd_raw
_DATA	SEGMENT
COMM	_chunks_raw:BYTE:0d70H
COMM	_snd:DWORD
COMM	_raw_track:DWORD:0d7H
COMM	_m_num_simultaneously_playing_channels:DWORD
COMM	_main_volum_tmp:WORD
_DATA	ENDS
msvcjmc	SEGMENT
__CD417A16_concurrencysal@h DB 01H
__18C11F8D_sal@h DB 01H
__BD42D05E_vadefs@h DB 01H
__2DC9DF70_vcruntime@h DB 01H
__6569C2CA_corecrt@h DB 01H
__A2143F22_corecrt_stdio_config@h DB 01H
__829E1958_corecrt_wstdio@h DB 01H
__6DFAE8B8_stdio@h DB 01H
__A9063C41_corecrt_share@h DB 01H
__6D390390_corecrt_wio@h DB 01H
__2671BD82_corecrt_io@h DB 01H
__9B190114_io@h DB 01H
__C54FBE38_stdint@h DB 01H
__D0DFFAC6_winpackagefamily@h DB 01H
__D0D0F397_winapifamily@h DB 01H
__1ADC5BE7_begin_code@h DB 01H
__8D67BD40_close_code@h DB 01H
__DDEA9788_SDL_platform@h DB 01H
__94A3FDDD_sdkddkver@h DB 01H
__4BD2FD7B_SDL_config@h DB 01H
__C9393812_stddef@h DB 01H
__F19000F7_stdarg@h DB 01H
__EBA520B6_SDL_stdinc@h DB 01H
__C6E6D7CD_SDL_main@h DB 01H
__C819AA9E_SDL_assert@h DB 01H
__D7AB785A_SDL_atomic@h DB 01H
__7CDE7143_SDL_error@h DB 01H
__C264589F_SDL_endian@h DB 01H
__BF5E9F8E_SDL_mutex@h DB 01H
__741AE07E_corecrt_math@h DB 01H
__91D68F2D_math@h DB 01H
__C66E9EB9_vcruntime_startup@h DB 01H
__F6CEABBE_corecrt_startup@h DB 01H
__61BDDCD5_corecrt_wprocess@h DB 01H
__F57902D7_process@h DB 01H
__0C4DD541_SDL_thread@h DB 01H
__1FA23C7D_SDL_rwops@h DB 01H
__4BA16835_SDL_audio@h DB 01H
__A80A68DA_SDL_clipboard@h DB 01H
__99FA516B_intrin0@inl@h DB 01H
__552C563B_setjmp@h DB 01H
__3BCDA13C_mmintrin@h DB 01H
__6C20D4D3_corecrt_malloc@h DB 01H
__20BB4341_malloc@h DB 01H
__AD1CB324_xmmintrin@h DB 01H
__C87E3AE8_emmintrin@h DB 01H
__17DF5261_pmmintrin@h DB 01H
__A70621E3_tmmintrin@h DB 01H
__8E3D3460_smmintrin@h DB 01H
__EB5FBDAC_nmmintrin@h DB 01H
__3EE447E2_wmmintrin@h DB 01H
__F5700AE5_zmmintrin@h DB 01H
__C264A82F_immintrin@h DB 01H
__78A7496A_ammintrin@h DB 01H
__74E2446C_mm3dnow@h DB 01H
__731AEA4C_intrin@h DB 01H
__68067E44_SDL_cpuinfo@h DB 01H
__64E89E41_SDL_pixels@h DB 01H
__BFEA0781_SDL_rect@h DB 01H
__03192F33_SDL_blendmode@h DB 01H
__00CE5C3F_SDL_surface@h DB 01H
__D71AB72D_SDL_video@h DB 01H
__0166E892_SDL_scancode@h DB 01H
__1B40CEEC_SDL_keycode@h DB 01H
__92B90C80_SDL_keyboard@h DB 01H
__41FFAFA3_SDL_mouse@h DB 01H
__9364B404_SDL_joystick@h DB 01H
__049FB5AB_SDL_sensor@h DB 01H
__5B890460_SDL_gamecontroller@h DB 01H
__362302C9_SDL_quit@h DB 01H
__EB78B272_SDL_touch@h DB 01H
__18F5D7F5_SDL_gesture@h DB 01H
__9C10120D_SDL_events@h DB 01H
__D54FBDEE_SDL_filesystem@h DB 01H
__627295A5_SDL_haptic@h DB 01H
__57D222F1_SDL_hints@h DB 01H
__28D3E821_SDL_loadso@h DB 01H
__52E9A77B_SDL_log@h DB 01H
__E1B8B927_SDL_messagebox@h DB 01H
__28C501EE_SDL_metal@h DB 01H
__512DBC7B_SDL_power@h DB 01H
__75481EC3_SDL_render@h DB 01H
__ECCEE624_SDL_shape@h DB 01H
__D14E8A6D_SDL_system@h DB 01H
__596BF456_SDL_timer@h DB 01H
__130AA0EB_SDL_version@h DB 01H
__A8160445_SDL_locale@h DB 01H
__C1EAB8A4_SDL_misc@h DB 01H
__0E484B1D_SDL@h DB 01H
__8C96D970_SDL_mixer@h DB 01H
__CDDAF8CA_errno@h DB 01H
__6BB4896E_vcruntime_string@h DB 01H
__1FEB9909_corecrt_memcpy_s@h DB 01H
__A751F051_corecrt_memory@h DB 01H
__9200769A_corecrt_wstring@h DB 01H
__32E5F013_string@h DB 01H
__B8F6ED13_sound@h DB 01H
__2F24349B_sound@c DB 01H
msvcjmc	ENDS
_DATA	SEGMENT
_snd_raw DB	'RAWSOUND/EXTRA/ATMODEM.RAW', 00H
	ORG $+23
	ORG $+2
	DD	05622H
	DD	081bH
	DW	08H
	DW	05fffH
	DW	01H
	ORG $+2
	DB	'RAWSOUND/EXTRA/ATRADIO.RAW', 00H
	ORG $+23
	ORG $+2
	DD	05622H
	DD	07cfH
	DW	08H
	DW	05fffH
	DW	01H
	ORG $+2
	DB	'RAWSOUND/EXTRA/EXPTERR.RAW', 00H
	ORG $+23
	ORG $+2
	DD	02b11H
	DD	0ca7H
	DW	08H
	DW	05fffH
	DW	01H
	ORG $+2
	DB	'RAWSOUND/EXTRA/FTCONC1.RAW', 00H
	ORG $+23
	ORG $+2
	DD	05622H
	DD	04fH
	DW	08H
	DW	0fffH
	DW	01H
	ORG $+2
	DB	'RAWSOUND/EXTRA/FTCONC2.RAW', 00H
	ORG $+23
	ORG $+2
	DD	05622H
	DD	05aH
	DW	08H
	DW	0fffH
	DW	01H
	ORG $+2
	DB	'RAWSOUND/EXTRA/FTMARB1.RAW', 00H
	ORG $+23
	ORG $+2
	DD	02b11H
	DD	05fH
	DW	08H
	DW	0fffH
	DW	01H
	ORG $+2
	DB	'RAWSOUND/EXTRA/FTMARB2.RAW', 00H
	ORG $+23
	ORG $+2
	DD	02b11H
	DD	078H
	DW	08H
	DW	0fffH
	DW	01H
	ORG $+2
	DB	'RAWSOUND/EXTRA/FTMETAL1.RAW', 00H
	ORG $+22
	ORG $+2
	DD	05622H
	DD	0d6H
	DW	08H
	DW	0fffH
	DW	01H
	ORG $+2
	DB	'RAWSOUND/EXTRA/FTMETAL2.RAW ', 00H
	ORG $+21
	ORG $+2
	DD	05622H
	DD	0c9H
	DW	08H
	DW	0fffH
	DW	01H
	ORG $+2
	DB	'RAWSOUND/EXTRA/FTMUD1.RAW', 00H
	ORG $+24
	ORG $+2
	DD	02b11H
	DD	09bH
	DW	08H
	DW	0fffH
	DW	01H
	ORG $+2
	DB	'RAWSOUND/EXTRA/FTMUD2.RAW', 00H
	ORG $+24
	ORG $+2
	DD	02b11H
	DD	0c5H
	DW	08H
	DW	0fffH
	DW	01H
	ORG $+2
	DB	'RAWSOUND/EXTRA/FTSLUDG1.RAW', 00H
	ORG $+22
	ORG $+2
	DD	02b11H
	DD	025aH
	DW	08H
	DW	0fffH
	DW	01H
	ORG $+2
	DB	'RAWSOUND/EXTRA/FTSLUDG2.RAW', 00H
	ORG $+22
	ORG $+2
	DD	02b11H
	DD	0295H
	DW	08H
	DW	0fffH
	DW	01H
	ORG $+2
	DB	'RAWSOUND/EXTRA/FTSOFT1.RAW ', 00H
	ORG $+22
	ORG $+2
	DD	05622H
	DD	0a1H
	DW	08H
	DW	0fffH
	DW	01H
	ORG $+2
	DB	'RAWSOUND/EXTRA/FTSOFT2.RAW', 00H
	ORG $+23
	ORG $+2
	DD	05622H
	DD	0f9H
	DW	08H
	DW	0fffH
	DW	01H
	ORG $+2
	DB	'RAWSOUND/EXTRA/FTTUBE1.RAW', 00H
	ORG $+23
	ORG $+2
	DD	02b11H
	DD	024fH
	DW	08H
	DW	0fffH
	DW	01H
	ORG $+2
	DB	'RAWSOUND/EXTRA/FTTUBE2.RAW', 00H
	ORG $+23
	ORG $+2
	DD	02b11H
	DD	0227H
	DW	08H
	DW	0fffH
	DW	01H
	ORG $+2
	DB	'RAWSOUND/EXTRA/FTWOOD1.RAW', 00H
	ORG $+23
	ORG $+2
	DD	02b11H
	DD	074H
	DW	08H
	DW	0fffH
	DW	01H
	ORG $+2
	DB	'RAWSOUND/EXTRA/FTWOOD2.RAW ', 00H
	ORG $+22
	ORG $+2
	DD	02b11H
	DD	06fH
	DW	08H
	DW	0fffH
	DW	01H
	ORG $+2
	DB	'RAWSOUND/EXTRA/HDETHF1.RAW ', 00H
	ORG $+22
	ORG $+2
	DD	05622H
	DD	0292H
	DW	08H
	DW	05fffH
	DW	05H
	ORG $+2
	DB	'RAWSOUND/EXTRA/HDETHF2.RAW', 00H
	ORG $+23
	ORG $+2
	DD	05622H
	DD	0510H
	DW	08H
	DW	05fffH
	DW	05H
	ORG $+2
	DB	'RAWSOUND/EXTRA/HDETHM1.RAW ', 00H
	ORG $+22
	ORG $+2
	DD	05622H
	DD	0468H
	DW	08H
	DW	05fffH
	DW	05H
	ORG $+2
	DB	'RAWSOUND/EXTRA/HDETHM2.RAW', 00H
	ORG $+23
	ORG $+2
	DD	05622H
	DD	051aH
	DW	08H
	DW	05fffH
	DW	05H
	ORG $+2
	DB	'RAWSOUND/EXTRA/HDETHM3.RAW', 00H
	ORG $+23
	ORG $+2
	DD	05622H
	DD	06b0H
	DW	08H
	DW	05fffH
	DW	05H
	ORG $+2
	DB	'RAWSOUND/EXTRA/HPAINF1.RAW ', 00H
	ORG $+22
	ORG $+2
	DD	05622H
	DD	01c5H
	DW	08H
	DW	05fffH
	DW	03H
	ORG $+2
	DB	'RAWSOUND/EXTRA/HPAINF2.RAW', 00H
	ORG $+23
	ORG $+2
	DD	05622H
	DD	01a3H
	DW	08H
	DW	05fffH
	DW	03H
	ORG $+2
	DB	'RAWSOUND/EXTRA/HPAINM1.RAW', 00H
	ORG $+23
	ORG $+2
	DD	05622H
	DD	01f7H
	DW	08H
	DW	05fffH
	DW	03H
	ORG $+2
	DB	'RAWSOUND/EXTRA/HPAINM2.RAW', 00H
	ORG $+23
	ORG $+2
	DD	05622H
	DD	0133H
	DW	08H
	DW	05fffH
	DW	03H
	ORG $+2
	DB	'RAWSOUND/EXTRA/HPAINM3.RAW', 00H
	ORG $+23
	ORG $+2
	DD	05622H
	DD	01f0H
	DW	08H
	DW	05fffH
	DW	03H
	ORG $+2
	DB	'RAWSOUND/EXTRA/LBUTTN1.RAW', 00H
	ORG $+23
	ORG $+2
	DD	05622H
	DD	01fH
	DW	08H
	DW	05fffH
	DW	01H
	ORG $+2
	DB	'RAWSOUND/EXTRA/LBUTTN2.RAW', 00H
	ORG $+23
	ORG $+2
	DD	05622H
	DD	0e1H
	DW	08H
	DW	05fffH
	DW	01H
	ORG $+2
	DB	'RAWSOUND/EXTRA/LOCLANG.RAW', 00H
	ORG $+23
	ORG $+2
	DD	02b11H
	DD	08ceH
	DW	08H
	DW	05fffH
	DW	01H
	ORG $+2
	DB	'RAWSOUND/EXTRA/MBSPREAD.RAW', 00H
	ORG $+22
	ORG $+2
	DD	05622H
	DD	0712H
	DW	08H
	DW	05fffH
	DW	01H
	ORG $+2
	DB	'RAWSOUND/EXTRA/OBJFALL1.RAW', 00H
	ORG $+22
	ORG $+2
	DD	05622H
	DD	0cdH
	DW	08H
	DW	05fffH
	DW	01H
	ORG $+2
	DB	'RAWSOUND/EXTRA/OBJFALL2.RAW', 00H
	ORG $+22
	ORG $+2
	DD	05622H
	DD	089H
	DW	08H
	DW	05fffH
	DW	01H
	ORG $+2
	DB	'RAWSOUND/EXTRA/OBJFALL3.RAW', 00H
	ORG $+22
	ORG $+2
	DD	05622H
	DD	0127H
	DW	08H
	DW	05fffH
	DW	01H
	ORG $+2
	DB	'RAWSOUND/EXTRA/RUBCRASH.RAW', 00H
	ORG $+22
	ORG $+2
	DD	05622H
	DD	0859H
	DW	08H
	DW	05fffH
	DW	01H
	ORG $+2
	DB	'RAWSOUND/EXTRA/TRONLAUN.RAW', 00H
	ORG $+22
	ORG $+2
	DD	05622H
	DD	02f1H
	DW	08H
	DW	05fffH
	DW	01H
	ORG $+2
	DB	'RAWSOUND/SPARES/DIMFIELD.RAW', 00H
	ORG $+21
	ORG $+2
	DD	05622H
	DD	053aH
	DW	08H
	DW	05fffH
	DW	04H
	ORG $+2
	DB	'RAWSOUND/SPARES/FORCEWEB.RAW', 00H
	ORG $+21
	ORG $+2
	DD	05622H
	DD	07afH
	DW	08H
	DW	05fffH
	DW	04H
	ORG $+2
	DB	'RAWSOUND/SPARES/MTRACKER.RAW', 00H
	ORG $+21
	ORG $+2
	DD	05622H
	DD	01c9H
	DW	08H
	DW	05fffH
	DW	04H
	ORG $+2
	DB	'RAWSOUND/SPARES/PISTOL.RAW', 00H
	ORG $+23
	ORG $+2
	DD	05622H
	DD	0253H
	DW	08H
	DW	05fffH
	DW	04H
	ORG $+2
	DB	'RAWSOUND/SPARES/PISTOL2.RAW', 00H
	ORG $+22
	ORG $+2
	DD	05622H
	DD	0227H
	DW	08H
	DW	05fffH
	DW	04H
	ORG $+2
	DB	'RAWSOUND/STRATEGC/EXPLOSNS/DIMSHIFT.RAW', 00H
	ORG $+10
	ORG $+2
	DD	05622H
	DD	040dH
	DW	08H
	DW	05fffH
	DW	06H
	ORG $+2
	DB	'RAWSOUND/STRATEGC/EXPLOSNS/EXPLOSN1.RAW', 00H
	ORG $+10
	ORG $+2
	DD	05622H
	DD	060cH
	DW	08H
	DW	05fffH
	DW	06H
	ORG $+2
	DB	'RAWSOUND/STRATEGC/EXPLOSNS/EXPLOSN2.RAW', 00H
	ORG $+10
	ORG $+2
	DD	05622H
	DD	080bH
	DW	08H
	DW	05fffH
	DW	06H
	ORG $+2
	DB	'RAWSOUND/STRATEGC/EXPLOSNS/EXPLOSN3.RAW', 00H
	ORG $+10
	ORG $+2
	DD	02b11H
	DD	041eH
	DW	08H
	DW	05fffH
	DW	06H
	ORG $+2
	DB	'RAWSOUND/STRATEGC/EXPLOSNS/SHLDHIT1.RAW', 00H
	ORG $+10
	ORG $+2
	DD	05622H
	DD	0309H
	DW	08H
	DW	05fffH
	DW	06H
	ORG $+2
	DB	'RAWSOUND/STRATEGC/EXPLOSNS/TELEPORT.RAW', 00H
	ORG $+10
	ORG $+2
	DD	05622H
	DD	0467H
	DW	08H
	DW	05fffH
	DW	04H
	ORG $+2
	DB	'RAWSOUND/STRATEGC/INTRFACE/BUTTNDRP.RAW', 00H
	ORG $+10
	ORG $+2
	DD	05622H
	DD	012H
	DW	08H
	DW	05fffH
	DW	01H
	ORG $+2
	DB	'RAWSOUND/STRATEGC/INTRFACE/BUTTON1.RAW', 00H
	ORG $+11
	ORG $+2
	DD	05622H
	DD	035H
	DW	08H
	DW	05fffH
	DW	01H
	ORG $+2
	DB	'RAWSOUND/STRATEGC/INTRFACE/DAMAGE.RAW', 00H
	ORG $+12
	ORG $+2
	DD	05622H
	DD	02bdH
	DW	08H
	DW	05fffH
	DW	01H
	ORG $+2
	DB	'RAWSOUND/STRATEGC/INTRFACE/UFOALERT.RAW', 00H
	ORG $+10
	ORG $+2
	DD	05622H
	DD	0140H
	DW	08H
	DW	05fffH
	DW	01H
	ORG $+2
	DB	'RAWSOUND/STRATEGC/TERRAIN/DGATE_IN.RAW', 00H
	ORG $+11
	ORG $+2
	DD	05622H
	DD	0858H
	DW	08H
	DW	05fffH
	DW	03H
	ORG $+2
	DB	'RAWSOUND/STRATEGC/TERRAIN/DGAT_OUT.RAW', 00H
	ORG $+11
	ORG $+2
	DD	05622H
	DD	0858H
	DW	08H
	DW	05fffH
	DW	03H
	ORG $+2
	DB	'RAWSOUND/STRATEGC/TERRAIN/TERRN_LP.RAW', 00H
	ORG $+11
	ORG $+2
	DD	05622H
	DD	0883H
	DW	08H
	DW	05fffH
	DW	01H
	ORG $+2
	DB	'RAWSOUND/STRATEGC/VEHICLE/BIGUFO2.RAW', 00H
	ORG $+12
	ORG $+2
	DD	05622H
	DD	0565H
	DW	08H
	DW	05fffH
	DW	01H
	ORG $+2
	DB	'RAWSOUND/STRATEGC/VEHICLE/BIGUFO3.RAW', 00H
	ORG $+12
	ORG $+2
	DD	05622H
	DD	0664H
	DW	08H
	DW	05fffH
	DW	01H
	ORG $+2
	DB	'RAWSOUND/STRATEGC/VEHICLE/COPSIRN1.RAW', 00H
	ORG $+11
	ORG $+2
	DD	05622H
	DD	038cH
	DW	08H
	DW	05fffH
	DW	01H
	ORG $+2
	DB	'RAWSOUND/STRATEGC/VEHICLE/COPSIRN2.RAW', 00H
	ORG $+11
	ORG $+2
	DD	05622H
	DD	0725H
	DW	08H
	DW	05fffH
	DW	01H
	ORG $+2
	DB	'RAWSOUND/STRATEGC/VEHICLE/ELECTCAR.RAW', 00H
	ORG $+11
	ORG $+2
	DD	05622H
	DD	05ebH
	DW	08H
	DW	05fffH
	DW	01H
	ORG $+2
	DB	'RAWSOUND/STRATEGC/VEHICLE/HOVERCAR.RAW', 00H
	ORG $+11
	ORG $+2
	DD	05622H
	DD	045cH
	DW	08H
	DW	05fffH
	DW	01H
	ORG $+2
	DB	'RAWSOUND/STRATEGC/VEHICLE/MEDUFO.RAW', 00H
	ORG $+13
	ORG $+2
	DD	05622H
	DD	062bH
	DW	08H
	DW	05fffH
	DW	01H
	ORG $+2
	DB	'RAWSOUND/STRATEGC/VEHICLE/MEDUFO3.RAW', 00H
	ORG $+12
	ORG $+2
	DD	05622H
	DD	07c8H
	DW	08H
	DW	05fffH
	DW	01H
	ORG $+2
	DB	'RAWSOUND/STRATEGC/VEHICLE/ROADCAR1.RAW', 00H
	ORG $+11
	ORG $+2
	DD	05622H
	DD	071fH
	DW	08H
	DW	05fffH
	DW	01H
	ORG $+2
	DB	'RAWSOUND/STRATEGC/VEHICLE/SMALLUFO.RAW', 00H
	ORG $+11
	ORG $+2
	DD	05622H
	DD	0130H
	DW	08H
	DW	05fffH
	DW	01H
	ORG $+2
	DB	'RAWSOUND/STRATEGC/VEHICLE/SMLUFO2.RAW', 00H
	ORG $+12
	ORG $+2
	DD	05622H
	DD	051eH
	DW	08H
	DW	05fffH
	DW	01H
	ORG $+2
	DB	'RAWSOUND/STRATEGC/VEHICLE/SMLUFO3.RAW', 00H
	ORG $+12
	ORG $+2
	DD	05622H
	DD	0369H
	DW	08H
	DW	05fffH
	DW	01H
	ORG $+2
	DB	'RAWSOUND/STRATEGC/VEHICLE/SP_LINER.RAW', 00H
	ORG $+11
	ORG $+2
	DD	05622H
	DD	0846H
	DW	08H
	DW	05fffH
	DW	01H
	ORG $+2
	DB	'RAWSOUND/STRATEGC/VEHICLE/TANKLP.RAW', 00H
	ORG $+13
	ORG $+2
	DD	05622H
	DD	051cH
	DW	08H
	DW	05fffH
	DW	01H
	ORG $+2
	DB	'RAWSOUND/STRATEGC/VEHICLE/TRUCKS.RAW', 00H
	ORG $+13
	ORG $+2
	DD	05622H
	DD	06a6H
	DW	08H
	DW	05fffH
	DW	01H
	ORG $+2
	DB	'RAWSOUND/STRATEGC/WEAPONS/AIRGUARD.RAW', 00H
	ORG $+11
	ORG $+2
	DD	05622H
	DD	0320H
	DW	08H
	DW	05fffH
	DW	04H
	ORG $+2
	DB	'RAWSOUND/STRATEGC/WEAPONS/BOLTER.RAW', 00H
	ORG $+13
	ORG $+2
	DD	05622H
	DD	0196H
	DW	08H
	DW	05fffH
	DW	04H
	ORG $+2
	DB	'RAWSOUND/STRATEGC/WEAPONS/DINVRSN1.RAW', 00H
	ORG $+11
	ORG $+2
	DD	05622H
	DD	077eH
	DW	08H
	DW	05fffH
	DW	04H
	ORG $+2
	DB	'RAWSOUND/STRATEGC/WEAPONS/DISRUPT1.RAW', 00H
	ORG $+11
	ORG $+2
	DD	05622H
	DD	031fH
	DW	08H
	DW	05fffH
	DW	04H
	ORG $+2
	DB	'RAWSOUND/STRATEGC/WEAPONS/DISRUPT2.RAW', 00H
	ORG $+11
	ORG $+2
	DD	05622H
	DD	03ffH
	DW	08H
	DW	05fffH
	DW	04H
	ORG $+2
	DB	'RAWSOUND/STRATEGC/WEAPONS/DISRUPT3.RAW', 00H
	ORG $+11
	ORG $+2
	DD	05622H
	DD	0442H
	DW	08H
	DW	05fffH
	DW	04H
	ORG $+2
	DB	'RAWSOUND/STRATEGC/WEAPONS/GR_MISSL.RAW', 00H
	ORG $+11
	ORG $+2
	DD	05622H
	DD	054cH
	DW	08H
	DW	05fffH
	DW	04H
	ORG $+2
	DB	'RAWSOUND/STRATEGC/WEAPONS/HELLFIRE.RAW', 00H
	ORG $+11
	ORG $+2
	DD	05622H
	DD	0376H
	DW	08H
	DW	05fffH
	DW	04H
	ORG $+2
	DB	'RAWSOUND/STRATEGC/WEAPONS/JANITOR.RAW', 00H
	ORG $+12
	ORG $+2
	DD	05622H
	DD	0488H
	DW	08H
	DW	05fffH
	DW	04H
	ORG $+2
	DB	'RAWSOUND/STRATEGC/WEAPONS/JUSTICE.RAW', 00H
	ORG $+12
	ORG $+2
	DD	05622H
	DD	0596H
	DW	08H
	DW	05fffH
	DW	04H
	ORG $+2
	DB	'RAWSOUND/STRATEGC/WEAPONS/LANCER.RAW', 00H
	ORG $+13
	ORG $+2
	DD	05622H
	DD	0419H
	DW	08H
	DW	05fffH
	DW	04H
	ORG $+2
	DB	'RAWSOUND/STRATEGC/WEAPONS/MARSDEF.RAW', 00H
	ORG $+12
	ORG $+2
	DD	05622H
	DD	04feH
	DW	08H
	DW	05fffH
	DW	04H
	ORG $+2
	DB	'RAWSOUND/STRATEGC/WEAPONS/MARSPLAS.RAW', 00H
	ORG $+11
	ORG $+2
	DD	05622H
	DD	033fH
	DW	08H
	DW	05fffH
	DW	04H
	ORG $+2
	DB	'RAWSOUND/STRATEGC/WEAPONS/MARS_GLM.RAW', 00H
	ORG $+11
	ORG $+2
	DD	05622H
	DD	0726H
	DW	08H
	DW	05fffH
	DW	04H
	ORG $+2
	DB	'RAWSOUND/STRATEGC/WEAPONS/MCANNON.RAW', 00H
	ORG $+12
	ORG $+2
	DD	05622H
	DD	02fcH
	DW	08H
	DW	05fffH
	DW	04H
	ORG $+2
	DB	'RAWSOUND/STRATEGC/WEAPONS/MEGLASER.RAW', 00H
	ORG $+11
	ORG $+2
	DD	05622H
	DD	0125H
	DW	08H
	DW	05fffH
	DW	04H
	ORG $+2
	DB	'RAWSOUND/STRATEGC/WEAPONS/MPLASMA1.RAW', 00H
	ORG $+11
	ORG $+2
	DD	05622H
	DD	0f3H
	DW	08H
	DW	05fffH
	DW	04H
	ORG $+2
	DB	'RAWSOUND/STRATEGC/WEAPONS/MPLASMA2.RAW', 00H
	ORG $+11
	ORG $+2
	DD	05622H
	DD	02a8H
	DW	08H
	DW	05fffH
	DW	04H
	ORG $+2
	DB	'RAWSOUND/STRATEGC/WEAPONS/MULTPLAS.RAW', 00H
	ORG $+11
	ORG $+2
	DD	05622H
	DD	025cH
	DW	08H
	DW	05fffH
	DW	04H
	ORG $+2
	DB	'RAWSOUND/STRATEGC/WEAPONS/REPEATER.RAW', 00H
	ORG $+11
	ORG $+2
	DD	05622H
	DD	017aH
	DW	08H
	DW	05fffH
	DW	04H
	ORG $+2
	DB	'RAWSOUND/STRATEGC/WEAPONS/RETRIB.RAW', 00H
	ORG $+13
	ORG $+2
	DD	05622H
	DD	0357H
	DW	08H
	DW	05fffH
	DW	04H
	ORG $+2
	DB	'RAWSOUND/STRATEGC/WEAPONS/RUPTMULT.RAW', 00H
	ORG $+11
	ORG $+2
	DD	05622H
	DD	0453H
	DW	08H
	DW	05fffH
	DW	04H
	ORG $+2
	DB	'RAWSOUND/STRATEGC/WEAPONS/STASIS.RAW', 00H
	ORG $+13
	ORG $+2
	DD	05622H
	DD	0342H
	DW	08H
	DW	05fffH
	DW	04H
	ORG $+2
	DB	'RAWSOUND/STRATEGC/WEAPONS/TNKCANON.RAW', 00H
	ORG $+11
	ORG $+2
	DD	05622H
	DD	0250H
	DW	08H
	DW	05fffH
	DW	04H
	ORG $+2
	DB	'RAWSOUND/TACTICAL/ALIENS/ATTACKS/BRAINSUK.RAW', 00H
	ORG $+4
	ORG $+2
	DD	05622H
	DD	073bH
	DW	08H
	DW	05fffH
	DW	04H
	ORG $+2
	DB	'RAWSOUND/TACTICAL/ALIENS/ATTACKS/PSIMORPH.RAW', 00H
	ORG $+4
	ORG $+2
	DD	05622H
	DD	0756H
	DW	08H
	DW	05fffH
	DW	04H
	ORG $+2
	DB	'RAWSOUND/TACTICAL/ALIENS/ATTACKS/QUEENWHP.RAW', 00H
	ORG $+4
	ORG $+2
	DD	05622H
	DD	02afH
	DW	08H
	DW	05fffH
	DW	04H
	ORG $+2
	DB	'RAWSOUND/TACTICAL/ALIENS/ATTACKS/SPITTER.RAW', 00H
	ORG $+5
	ORG $+2
	DD	05622H
	DD	0305H
	DW	08H
	DW	05fffH
	DW	04H
	ORG $+2
	DB	'RAWSOUND/TACTICAL/ALIENS/ATTACKS/WORMSPIT.RAW', 00H
	ORG $+4
	ORG $+2
	DD	05622H
	DD	03d1H
	DW	08H
	DW	05fffH
	DW	04H
	ORG $+2
	DB	'RAWSOUND/TACTICAL/ALIENS/ATTACKS/WRMATTAK.RAW', 00H
	ORG $+4
	ORG $+2
	DD	05622H
	DD	06fbH
	DW	08H
	DW	05fffH
	DW	04H
	ORG $+2
	DB	'RAWSOUND/TACTICAL/ALIENS/ATTACKS/WRMHIT.RAW', 00H
	ORG $+6
	ORG $+2
	DD	05622H
	DD	033cH
	DW	08H
	DW	05fffH
	DW	04H
	ORG $+2
	DB	'RAWSOUND/TACTICAL/ALIENS/CRIES/ANTHRPD1.RAW', 00H
	ORG $+6
	ORG $+2
	DD	05622H
	DD	0730H
	DW	08H
	DW	05fffH
	DW	03H
	ORG $+2
	DB	'RAWSOUND/TACTICAL/ALIENS/CRIES/ANTHRPD2.RAW', 00H
	ORG $+6
	ORG $+2
	DD	05622H
	DD	0486H
	DW	08H
	DW	05fffH
	DW	03H
	ORG $+2
	DB	'RAWSOUND/TACTICAL/ALIENS/CRIES/BRNSUKR1.RAW', 00H
	ORG $+6
	ORG $+2
	DD	05622H
	DD	0674H
	DW	08H
	DW	05fffH
	DW	03H
	ORG $+2
	DB	'RAWSOUND/TACTICAL/ALIENS/CRIES/BRNSUKR2.RAW', 00H
	ORG $+6
	ORG $+2
	DD	05622H
	DD	08aaH
	DW	08H
	DW	05fffH
	DW	03H
	ORG $+2
	DB	'RAWSOUND/TACTICAL/ALIENS/CRIES/BRNSUKR3.RAW', 00H
	ORG $+6
	ORG $+2
	DD	05622H
	DD	04b8H
	DW	08H
	DW	05fffH
	DW	03H
	ORG $+2
	DB	'RAWSOUND/TACTICAL/ALIENS/CRIES/MEGTRON.RAW', 00H
	ORG $+7
	ORG $+2
	DD	05622H
	DD	0784H
	DW	08H
	DW	05fffH
	DW	03H
	ORG $+2
	DB	'RAWSOUND/TACTICAL/ALIENS/CRIES/MWORM1.RAW', 00H
	ORG $+8
	ORG $+2
	DD	05622H
	DD	01dcH
	DW	08H
	DW	05fffH
	DW	03H
	ORG $+2
	DB	'RAWSOUND/TACTICAL/ALIENS/CRIES/MWORM2.RAW', 00H
	ORG $+8
	ORG $+2
	DD	05622H
	DD	025fH
	DW	08H
	DW	05fffH
	DW	03H
	ORG $+2
	DB	'RAWSOUND/TACTICAL/ALIENS/CRIES/POPPER1.RAW', 00H
	ORG $+7
	ORG $+2
	DD	05622H
	DD	086aH
	DW	08H
	DW	05fffH
	DW	03H
	ORG $+2
	DB	'RAWSOUND/TACTICAL/ALIENS/CRIES/POPPER2.RAW', 00H
	ORG $+7
	ORG $+2
	DD	05622H
	DD	0713H
	DW	08H
	DW	05fffH
	DW	03H
	ORG $+2
	DB	'RAWSOUND/TACTICAL/ALIENS/CRIES/PSIMRPH1.RAW', 00H
	ORG $+6
	ORG $+2
	DD	05622H
	DD	0898H
	DW	08H
	DW	05fffH
	DW	03H
	ORG $+2
	DB	'RAWSOUND/TACTICAL/ALIENS/CRIES/PSIMRPH2.RAW', 00H
	ORG $+6
	ORG $+2
	DD	05622H
	DD	0872H
	DW	08H
	DW	05fffH
	DW	03H
	ORG $+2
	DB	'RAWSOUND/TACTICAL/ALIENS/CRIES/QUEENSP1.RAW', 00H
	ORG $+6
	ORG $+2
	DD	05622H
	DD	0783H
	DW	08H
	DW	05fffH
	DW	03H
	ORG $+2
	DB	'RAWSOUND/TACTICAL/ALIENS/CRIES/SALISCRY.RAW', 00H
	ORG $+6
	ORG $+2
	DD	05622H
	DD	05b8H
	DW	08H
	DW	05fffH
	DW	03H
	ORG $+2
	DB	'RAWSOUND/TACTICAL/ALIENS/CRIES/SKELETLD.RAW', 00H
	ORG $+6
	ORG $+2
	DD	05622H
	DD	0498H
	DW	08H
	DW	05fffH
	DW	03H
	ORG $+2
	DB	'RAWSOUND/TACTICAL/ALIENS/CRIES/SPITTR1.RAW', 00H
	ORG $+7
	ORG $+2
	DD	05622H
	DD	0392H
	DW	08H
	DW	05fffH
	DW	03H
	ORG $+2
	DB	'RAWSOUND/TACTICAL/ALIENS/CRIES/SPITTR2.RAW', 00H
	ORG $+7
	ORG $+2
	DD	05622H
	DD	0426H
	DW	08H
	DW	05fffH
	DW	03H
	ORG $+2
	DB	'RAWSOUND/TACTICAL/ALIENS/DEATHS/ANTHRPD1.RAW', 00H
	ORG $+5
	ORG $+2
	DD	05622H
	DD	0876H
	DW	08H
	DW	05fffH
	DW	05H
	ORG $+2
	DB	'RAWSOUND/TACTICAL/ALIENS/DEATHS/BRNSUKR2.RAW', 00H
	ORG $+5
	ORG $+2
	DD	05622H
	DD	068bH
	DW	08H
	DW	05fffH
	DW	05H
	ORG $+2
	DB	'RAWSOUND/TACTICAL/ALIENS/DEATHS/CHRYSALS.RAW', 00H
	ORG $+5
	ORG $+2
	DD	05622H
	DD	03a9H
	DW	08H
	DW	05fffH
	DW	05H
	ORG $+2
	DB	'RAWSOUND/TACTICAL/ALIENS/DEATHS/GUNK.RAW', 00H
	ORG $+9
	ORG $+2
	DD	05622H
	DD	043aH
	DW	08H
	DW	05fffH
	DW	05H
	ORG $+2
	DB	'RAWSOUND/TACTICAL/ALIENS/DEATHS/HOWL.RAW', 00H
	ORG $+9
	ORG $+2
	DD	05622H
	DD	04c3H
	DW	08H
	DW	05fffH
	DW	05H
	ORG $+2
	DB	'RAWSOUND/TACTICAL/ALIENS/DEATHS/HYPWRM01.RAW', 00H
	ORG $+5
	ORG $+2
	DD	05622H
	DD	02b8H
	DW	08H
	DW	05fffH
	DW	05H
	ORG $+2
	DB	'RAWSOUND/TACTICAL/ALIENS/DEATHS/MEGHOWL.RAW', 00H
	ORG $+6
	ORG $+2
	DD	05622H
	DD	0804H
	DW	08H
	DW	05fffH
	DW	05H
	ORG $+2
	DB	'RAWSOUND/TACTICAL/ALIENS/DEATHS/QUEENSP2.RAW', 00H
	ORG $+5
	ORG $+2
	DD	05622H
	DD	0765H
	DW	08H
	DW	05fffH
	DW	05H
	ORG $+2
	DB	'RAWSOUND/TACTICAL/ALIENS/DEATHS/SKELETD1.RAW', 00H
	ORG $+5
	ORG $+2
	DD	05622H
	DD	08b2H
	DW	08H
	DW	05fffH
	DW	05H
	ORG $+2
	DB	'RAWSOUND/TACTICAL/ALIENS/DEATHS/SPITTR1.RAW', 00H
	ORG $+6
	ORG $+2
	DD	05622H
	DD	0699H
	DW	08H
	DW	05fffH
	DW	05H
	ORG $+2
	DB	'RAWSOUND/TACTICAL/ALIENS/DEATHS/WORMEGG.RAW', 00H
	ORG $+6
	ORG $+2
	DD	05622H
	DD	01ceH
	DW	08H
	DW	05fffH
	DW	05H
	ORG $+2
	DB	'RAWSOUND/TACTICAL/ALIENS/MOVEMNTS/ANTHROP1.RAW', 00H
	ORG $+3
	ORG $+2
	DD	05622H
	DD	0134H
	DW	08H
	DW	03fffH
	DW	01H
	ORG $+2
	DB	'RAWSOUND/TACTICAL/ALIENS/MOVEMNTS/HYPWORM1.RAW', 00H
	ORG $+3
	ORG $+2
	DD	05622H
	DD	074eH
	DW	08H
	DW	03fffH
	DW	01H
	ORG $+2
	DB	'RAWSOUND/TACTICAL/ALIENS/MOVEMNTS/MEGTRON1.RAW', 00H
	ORG $+3
	ORG $+2
	DD	05622H
	DD	0189H
	DW	08H
	DW	03fffH
	DW	01H
	ORG $+2
	DB	'RAWSOUND/TACTICAL/ALIENS/MOVEMNTS/MEGTRON2.RAW', 00H
	ORG $+3
	ORG $+2
	DD	05622H
	DD	020cH
	DW	08H
	DW	03fffH
	DW	01H
	ORG $+2
	DB	'RAWSOUND/TACTICAL/ALIENS/MOVEMNTS/MULTWORM.RAW', 00H
	ORG $+3
	ORG $+2
	DD	05622H
	DD	07efH
	DW	08H
	DW	03fffH
	DW	01H
	ORG $+2
	DB	'RAWSOUND/TACTICAL/ALIENS/MOVEMNTS/POPPER1.RAW ', 00H
	ORG $+3
	ORG $+2
	DD	05622H
	DD	0183H
	DW	08H
	DW	03fffH
	DW	01H
	ORG $+2
	DB	'RAWSOUND/TACTICAL/ALIENS/MOVEMNTS/POPPER2.RAW ', 00H
	ORG $+3
	ORG $+2
	DD	05622H
	DD	0129H
	DW	08H
	DW	03fffH
	DW	01H
	ORG $+2
	DB	'RAWSOUND/TACTICAL/ALIENS/MOVEMNTS/QUEENSPN.RAW', 00H
	ORG $+3
	ORG $+2
	DD	05622H
	DD	087cH
	DW	08H
	DW	03fffH
	DW	01H
	ORG $+2
	DB	'RAWSOUND/TACTICAL/ALIENS/MOVEMNTS/SCUTTLE.RAW ', 00H
	ORG $+3
	ORG $+2
	DD	05622H
	DD	0708H
	DW	08H
	DW	03fffH
	DW	01H
	ORG $+2
	DB	'RAWSOUND/TACTICAL/ALIENS/MOVEMNTS/SKELSTP1.RAW', 00H
	ORG $+3
	ORG $+2
	DD	05622H
	DD	077H
	DW	08H
	DW	03fffH
	DW	01H
	ORG $+2
	DB	'RAWSOUND/TACTICAL/ALIENS/MOVEMNTS/SKELSTP2.RAW', 00H
	ORG $+3
	ORG $+2
	DD	05622H
	DD	0aaH
	DW	08H
	DW	03fffH
	DW	01H
	ORG $+2
	DB	'RAWSOUND/TACTICAL/ALIENS/MOVEMNTS/SPITTER1.RAW', 00H
	ORG $+3
	ORG $+2
	DD	05622H
	DD	01fdH
	DW	08H
	DW	03fffH
	DW	01H
	ORG $+2
	DB	'RAWSOUND/TACTICAL/ALIENS/MOVEMNTS/SPITTER2.RAW', 00H
	ORG $+3
	ORG $+2
	DD	05622H
	DD	010cH
	DW	08H
	DW	03fffH
	DW	01H
	ORG $+2
	DB	'RAWSOUND/TACTICAL/EXPLOSNS/EXPLOSN1.RAW', 00H
	ORG $+10
	ORG $+2
	DD	05622H
	DD	0834H
	DW	08H
	DW	07fffH
	DW	06H
	ORG $+2
	DB	'RAWSOUND/TACTICAL/EXPLOSNS/EXPLOSN2.RAW', 00H
	ORG $+10
	ORG $+2
	DD	05622H
	DD	05c3H
	DW	08H
	DW	07fffH
	DW	06H
	ORG $+2
	DB	'RAWSOUND/TACTICAL/EXPLOSNS/FIREXPLS.RAW', 00H
	ORG $+10
	ORG $+2
	DD	05622H
	DD	076bH
	DW	08H
	DW	07fffH
	DW	06H
	ORG $+2
	DB	'RAWSOUND/TACTICAL/EXPLOSNS/GASEXPLS.RAW', 00H
	ORG $+10
	ORG $+2
	DD	05622H
	DD	07e6H
	DW	08H
	DW	05fffH
	DW	06H
	ORG $+2
	DB	'RAWSOUND/TACTICAL/EXPLOSNS/MTRACK1.RAW', 00H
	ORG $+11
	ORG $+2
	DD	05622H
	DD	05eH
	DW	08H
	DW	05fffH
	DW	06H
	ORG $+2
	DB	'RAWSOUND/TACTICAL/EXPLOSNS/MTRACK2.RAW', 00H
	ORG $+11
	ORG $+2
	DD	05622H
	DD	0ddH
	DW	08H
	DW	05fffH
	DW	06H
	ORG $+2
	DB	'RAWSOUND/TACTICAL/EXPLOSNS/PSIGRNAD.RAW', 00H
	ORG $+10
	ORG $+2
	DD	05622H
	DD	065fH
	DW	08H
	DW	05fffH
	DW	06H
	ORG $+2
	DB	'RAWSOUND/TACTICAL/EXPLOSNS/SHLDHIT1.RAW', 00H
	ORG $+10
	ORG $+2
	DD	05622H
	DD	0309H
	DW	08H
	DW	05fffH
	DW	06H
	ORG $+2
	DB	'RAWSOUND/TACTICAL/EXPLOSNS/STUNGRND.RAW', 00H
	ORG $+10
	ORG $+2
	DD	05622H
	DD	02c0H
	DW	08H
	DW	05fffH
	DW	06H
	ORG $+2
	DB	'RAWSOUND/TACTICAL/EXPLOSNS/TELEPORT.RAW', 00H
	ORG $+10
	ORG $+2
	DD	05622H
	DD	03cfH
	DW	08H
	DW	05fffH
	DW	03H
	ORG $+2
	DB	'RAWSOUND/TACTICAL/INTRFACE/BUTTON1.RAW', 00H
	ORG $+11
	ORG $+2
	DD	05622H
	DD	035H
	DW	08H
	DW	05fffH
	DW	01H
	ORG $+2
	DB	'RAWSOUND/TACTICAL/INTRFACE/ENEMY.RAW', 00H
	ORG $+13
	ORG $+2
	DD	05622H
	DD	0133H
	DW	08H
	DW	05fffH
	DW	01H
	ORG $+2
	DB	'RAWSOUND/TACTICAL/INTRFACE/UNDRFIRE.RAW', 00H
	ORG $+10
	ORG $+2
	DD	05622H
	DD	0257H
	DW	08H
	DW	05fffH
	DW	01H
	ORG $+2
	DB	'RAWSOUND/TACTICAL/TERRAIN/DOORWHSH.RAW', 00H
	ORG $+11
	ORG $+2
	DD	05622H
	DD	0314H
	DW	08H
	DW	02fffH
	DW	01H
	ORG $+2
	DB	'RAWSOUND/TACTICAL/TERRAIN/LIFTLOOP.RAW', 00H
	ORG $+11
	ORG $+2
	DD	05622H
	DD	084cH
	DW	08H
	DW	05fffH
	DW	01H
	ORG $+2
	DB	'RAWSOUND/TACTICAL/TERRAIN/TELEPOT2.RAW', 00H
	ORG $+11
	ORG $+2
	DD	05622H
	DD	02d9H
	DW	08H
	DW	05fffH
	DW	01H
	ORG $+2
	DB	'RAWSOUND/TACTICAL/TERRAIN/TERRAIN.RAW', 00H
	ORG $+12
	ORG $+2
	DD	05622H
	DD	05dbH
	DW	08H
	DW	05fffH
	DW	01H
	ORG $+2
	DB	'RAWSOUND/TACTICAL/WEAPONS/BOOMROID.RAW', 00H
	ORG $+11
	ORG $+2
	DD	05622H
	DD	0324H
	DW	08H
	DW	05fffH
	DW	03H
	ORG $+2
	DB	'RAWSOUND/TACTICAL/WEAPONS/BULLET1.RAW', 00H
	ORG $+12
	ORG $+2
	DD	05622H
	DD	0233H
	DW	08H
	DW	05fffH
	DW	03H
	ORG $+2
	DB	'RAWSOUND/TACTICAL/WEAPONS/BULLET2.RAW', 00H
	ORG $+12
	ORG $+2
	DD	05622H
	DD	022cH
	DW	08H
	DW	05fffH
	DW	03H
	ORG $+2
	DB	'RAWSOUND/TACTICAL/WEAPONS/BULLET3.RAW', 00H
	ORG $+12
	ORG $+2
	DD	05622H
	DD	01ecH
	DW	08H
	DW	05fffH
	DW	03H
	ORG $+2
	DB	'RAWSOUND/TACTICAL/WEAPONS/DCANNON1.RAW', 00H
	ORG $+11
	ORG $+2
	DD	05622H
	DD	03f8H
	DW	08H
	DW	05fffH
	DW	03H
	ORG $+2
	DB	'RAWSOUND/TACTICAL/WEAPONS/DIMNMISL.RAW', 00H
	ORG $+11
	ORG $+2
	DD	05622H
	DD	082cH
	DW	08H
	DW	05fffH
	DW	03H
	ORG $+2
	DB	'RAWSOUND/TACTICAL/WEAPONS/DISRUPTR.RAW', 00H
	ORG $+11
	ORG $+2
	DD	05622H
	DD	028cH
	DW	08H
	DW	05fffH
	DW	03H
	ORG $+2
	DB	'RAWSOUND/TACTICAL/WEAPONS/DSTABLSR.RAW', 00H
	ORG $+11
	ORG $+2
	DD	05622H
	DD	0177H
	DW	08H
	DW	05fffH
	DW	03H
	ORG $+2
	DB	'RAWSOUND/TACTICAL/WEAPONS/ENTROPY.RAW', 00H
	ORG $+12
	ORG $+2
	DD	05622H
	DD	047bH
	DW	08H
	DW	05fffH
	DW	03H
	ORG $+2
	DB	'RAWSOUND/TACTICAL/WEAPONS/MARSEC1.RAW', 00H
	ORG $+12
	ORG $+2
	DD	05622H
	DD	055aH
	DW	08H
	DW	05fffH
	DW	03H
	ORG $+2
	DB	'RAWSOUND/TACTICAL/WEAPONS/MARSEC2.RAW', 00H
	ORG $+12
	ORG $+2
	DD	05622H
	DD	08afH
	DW	08H
	DW	05fffH
	DW	03H
	ORG $+2
	DB	'RAWSOUND/TACTICAL/WEAPONS/MEGAPOL.RAW', 00H
	ORG $+12
	ORG $+2
	DD	05622H
	DD	01b5H
	DW	08H
	DW	05fffH
	DW	03H
	ORG $+2
	DB	'RAWSOUND/TACTICAL/WEAPONS/MEGASTUN.RAW', 00H
	ORG $+11
	ORG $+2
	DD	05622H
	DD	0240H
	DW	08H
	DW	05fffH
	DW	03H
	ORG $+2
	DB	'RAWSOUND/TACTICAL/WEAPONS/MEGCANON.RAW', 00H
	ORG $+11
	ORG $+2
	DD	05622H
	DD	02bfH
	DW	08H
	DW	05fffH
	DW	03H
	ORG $+2
	DB	'RAWSOUND/TACTICAL/WEAPONS/MEGHIT.RAW', 00H
	ORG $+13
	ORG $+2
	DD	05622H
	DD	0189H
	DW	08H
	DW	05fffH
	DW	03H
	ORG $+2
	DB	'RAWSOUND/TACTICAL/WEAPONS/POWERS.RAW', 00H
	ORG $+13
	ORG $+2
	DD	05622H
	DD	0164H
	DW	08H
	DW	05fffH
	DW	03H
	ORG $+2
	DB	'RAWSOUND/TACTICAL/WEAPONS/PSIONIC1.RAW', 00H
	ORG $+11
	ORG $+2
	DD	05622H
	DD	058aH
	DW	08H
	DW	05fffH
	DW	03H
	ORG $+2
	DB	'RAWSOUND/TACTICAL/WEAPONS/SNIPER.RAW', 00H
	ORG $+13
	ORG $+2
	DD	05622H
	DD	091H
	DW	08H
	DW	05fffH
	DW	03H
	ORG $+2
	DB	'RAWSOUND/TACTICAL/WEAPONS/SUCKLAUN.RAW', 00H
	ORG $+11
	ORG $+2
	DD	05622H
	DD	028aH
	DW	08H
	DW	05fffH
	DW	03H
	ORG $+2
	DB	'RAWSOUND/TACTICAL/WEAPONS/THROW1.RAW', 00H
	ORG $+13
	ORG $+2
	DD	05622H
	DD	0127H
	DW	08H
	DW	05fffH
	DW	03H
	ORG $+2
	DB	'RAWSOUND/TACTICAL/WEAPONS/THROW2.RAW', 00H
	ORG $+13
	ORG $+2
	DD	05622H
	DD	0115H
	DW	08H
	DW	05fffH
	DW	03H
	ORG $+2
	DB	'RAWSOUND/TACTICAL/WEAPONS/TOXIGUN.RAW', 00H
	ORG $+12
	ORG $+2
	DD	05622H
	DD	0142H
	DW	08H
	DW	05fffH
	DW	03H
	ORG $+2
	DB	'RAWSOUND/TACTICAL/WEAPONS/TRAKGUN.RAW', 00H
	ORG $+12
	ORG $+2
	DD	05622H
	DD	0122H
	DW	08H
	DW	05fffH
	DW	03H
	ORG $+2
	DB	'RAWSOUND/TACTICAL/WEAPONS/TRAKHIT.RAW', 00H
	ORG $+12
	ORG $+2
	DD	05622H
	DD	0f1H
	DW	08H
	DW	05fffH
	DW	03H
	ORG $+2
	DB	'RAWSOUND/TACTICAL/WEAPONS/ZAPHIT.RAW', 00H
	ORG $+13
	ORG $+2
	DD	05622H
	DD	0296H
	DW	08H
	DW	05fffH
	DW	03H
	ORG $+2
	DB	'RAWSOUND/EXTRA/TEXTBEEP.RAW', 00H
	ORG $+22
	ORG $+2
	DD	05622H
	DD	03fH
	DW	08H
	DW	05fffH
	DW	01H
	ORG $+2
	DB	'RAWSOUND/EXTRA/BRHATCH.RAW', 00H
	ORG $+23
	ORG $+2
	DD	05622H
	DD	017aH
	DW	08H
	DW	05fffH
	DW	01H
	ORG $+2
	DB	'RAWSOUND/EXTRA/OBCONC.RAW', 00H
	ORG $+24
	ORG $+2
	DD	05622H
	DD	060H
	DW	08H
	DW	03fffH
	DW	02H
	ORG $+2
	DB	'RAWSOUND/EXTRA/OBMARB.RAW', 00H
	ORG $+24
	ORG $+2
	DD	05622H
	DD	024H
	DW	08H
	DW	03fffH
	DW	02H
	ORG $+2
	DB	'RAWSOUND/EXTRA/OBMETAL.RAW', 00H
	ORG $+23
	ORG $+2
	DD	05622H
	DD	0b6H
	DW	08H
	DW	03fffH
	DW	02H
	ORG $+2
	DB	'RAWSOUND/EXTRA/OBMUD.RAW', 00H
	ORG $+25
	ORG $+2
	DD	05622H
	DD	089H
	DW	08H
	DW	03fffH
	DW	02H
	ORG $+2
	DB	'RAWSOUND/EXTRA/OBSLUDG.RAW', 00H
	ORG $+23
	ORG $+2
	DD	05622H
	DD	0c2H
	DW	08H
	DW	03fffH
	DW	02H
	ORG $+2
	DB	'RAWSOUND/EXTRA/OBSOFT.RAW', 00H
	ORG $+24
	ORG $+2
	DD	05622H
	DD	02bH
	DW	08H
	DW	03fffH
	DW	02H
	ORG $+2
	DB	'RAWSOUND/EXTRA/OBTUBE.RAW', 00H
	ORG $+24
	ORG $+2
	DD	05622H
	DD	0309H
	DW	08H
	DW	03fffH
	DW	02H
	ORG $+2
	DB	'RAWSOUND/EXTRA/OBWOOD.RAW', 00H
	ORG $+24
	ORG $+2
	DD	05622H
	DD	089H
	DW	08H
	DW	03fffH
	DW	02H
	ORG $+2
	DB	'RAWSOUND/zEXTRA/ALERT.RAW', 00H
	ORG $+24
	ORG $+2
	DD	05622H
	DD	050fH
	DW	08H
	DW	05fffH
	DW	01H
	ORG $+2
	DB	'RAWSOUND/zEXTRA/ALERT2.RAW', 00H
	ORG $+23
	ORG $+2
	DD	05622H
	DD	067cH
	DW	08H
	DW	05fffH
	DW	03H
	ORG $+2
	DB	'RAWSOUND/zEXTRA/ALERT3.RAW', 00H
	ORG $+23
	ORG $+2
	DD	02b11H
	DD	0fb5H
	DW	08H
	DW	05fffH
	DW	03H
	ORG $+2
	DB	'RAWSOUND/zEXTRA/ALERT4.RAW', 00H
	ORG $+23
	ORG $+2
	DD	05622H
	DD	067cH
	DW	08H
	DW	05fffH
	DW	03H
	ORG $+2
	DB	'RAWSOUND/zEXTRA/DOOR1.RAW', 00H
	ORG $+24
	ORG $+2
	DD	05622H
	DD	01e3H
	DW	08H
	DW	03fffH
	DW	03H
	ORG $+2
	DB	'RAWSOUND/zEXTRA/DOOR2.RAW', 00H
	ORG $+24
	ORG $+2
	DD	05622H
	DD	01edH
	DW	08H
	DW	03fffH
	DW	03H
	ORG $+2
	DB	'RAWSOUND/zEXTRA/DOOR3.RAW', 00H
	ORG $+24
	ORG $+2
	DD	05622H
	DD	026aH
	DW	08H
	DW	03fffH
	DW	03H
	ORG $+2
	DB	'RAWSOUND/zEXTRA/DOOR4.RAW', 00H
	ORG $+24
	ORG $+2
	DD	05622H
	DD	022dH
	DW	08H
	DW	03fffH
	DW	03H
	ORG $+2
	DB	'RAWSOUND/zEXTRA/DOOR5.RAW', 00H
	ORG $+24
	ORG $+2
	DD	05622H
	DD	020eH
	DW	08H
	DW	03fffH
	DW	03H
	ORG $+2
	DB	'RAWSOUND/zEXTRA/GRAVLIFT.RAW', 00H
	ORG $+21
	ORG $+2
	DD	05622H
	DD	0706H
	DW	08H
	DW	05fffH
	DW	03H
	ORG $+2
	DB	'RAWSOUND/zEXTRA/HIT1.RAW', 00H
	ORG $+25
	ORG $+2
	DD	05622H
	DD	03c2H
	DW	08H
	DW	05fffH
	DW	03H
	ORG $+2
	DB	'RAWSOUND/zEXTRA/HIT2.RAW', 00H
	ORG $+25
	ORG $+2
	DD	05622H
	DD	03efH
	DW	08H
	DW	05fffH
	DW	03H
	ORG $+2
	DB	'RAWSOUND/zEXTRA/HIT3.RAW', 00H
	ORG $+25
	ORG $+2
	DD	05622H
	DD	0258H
	DW	08H
	DW	05fffH
	DW	03H
	ORG $+2
	DB	'RAWSOUND/zEXTRA/PSIONIC1.RAW', 00H
	ORG $+21
	ORG $+2
	DD	05622H
	DD	0678H
	DW	08H
	DW	05fffH
	DW	03H
	ORG $+2
	DB	'RAWSOUND/zEXTRA/PSIONIC2.RAW', 00H
	ORG $+21
	ORG $+2
	DD	05622H
	DD	025cH
	DW	08H
	DW	05fffH
	DW	03H
	ORG $+2
	DB	'RAWSOUND/zEXTRA/PSIONIC4.RAW', 00H
	ORG $+21
	ORG $+2
	DD	05622H
	DD	06f0H
	DW	08H
	DW	05fffH
	DW	03H
	ORG $+2
	DB	'RAWSOUND/zEXTRA/PSIONIC5.RAW', 00H
	ORG $+21
	ORG $+2
	DD	05622H
	DD	075eH
	DW	08H
	DW	05fffH
	DW	03H
	ORG $+2
	DB	'RAWSOUND/zEXTRA/PSIONIC6.RAW', 00H
	ORG $+21
	ORG $+2
	DD	05622H
	DD	06eaH
	DW	08H
	DW	05fffH
	DW	03H
	ORG $+2
	DB	'RAWSOUND/zEXTRA/PSIONIC7.RAW', 00H
	ORG $+21
	ORG $+2
	DD	05622H
	DD	04b7H
	DW	08H
	DW	05fffH
	DW	03H
	ORG $+2
	DB	'RAWSOUND/zEXTRA/LASEROF2.RAW', 00H
	ORG $+21
	ORG $+2
	DD	05622H
	DD	0418H
	DW	08H
	DW	05fffH
	DW	03H
	ORG $+2
_DATA	ENDS
PUBLIC	___local_stdio_printf_options
PUBLIC	__vfprintf_l
PUBLIC	_printf
PUBLIC	_close_sound
PUBLIC	_sound_init
PUBLIC	_sound
PUBLIC	_get_sound_volume
PUBLIC	_load_raw_snd
PUBLIC	_get_balance
PUBLIC	_get_first_free_channel
PUBLIC	_get_volume_dist
PUBLIC	__JustMyCode_Default
PUBLIC	??_C@_0BI@FKLEPBBC@ERROR?3?5SDL?5init?5audio?4?5@ ; `string'
PUBLIC	??_C@_07EDGOICEI@?$CFs?5?$CFs?5?6@		; `string'
PUBLIC	??_C@_0DF@ENFFBJEA@ERROR?3?5allocate?5channels?4Curren@ ; `string'
PUBLIC	??_C@_07IOKAONGO@?$CFs?5?$CFd?5?6@		; `string'
PUBLIC	??_C@_0DF@IOHDHJDL@SDL_mixer?5could?5not?5initialize?$CB@ ; `string'
PUBLIC	??_C@_02JDPG@rb@				; `string'
EXTRN	__imp____acrt_iob_func:PROC
EXTRN	__imp__fclose:PROC
EXTRN	__imp___fileno:PROC
EXTRN	__imp__fopen:PROC
EXTRN	__imp__fread:PROC
EXTRN	__imp____stdio_common_vfprintf:PROC
EXTRN	__imp___filelength:PROC
EXTRN	_SDL_GetError:PROC
EXTRN	_SDL_CloseAudio:PROC
EXTRN	__imp__malloc:PROC
EXTRN	_SDL_Init:PROC
EXTRN	_SDL_QuitSubSystem:PROC
EXTRN	_Mix_OpenAudio:PROC
EXTRN	_Mix_AllocateChannels:PROC
EXTRN	_Mix_QuickLoad_RAW:PROC
EXTRN	_Mix_SetPanning:PROC
EXTRN	_Mix_ReserveChannels:PROC
EXTRN	_Mix_PlayChannelTimed:PROC
EXTRN	_Mix_Volume:PROC
EXTRN	_Mix_VolumeChunk:PROC
EXTRN	_Mix_HaltChannel:PROC
EXTRN	_Mix_Playing:PROC
EXTRN	_Mix_CloseAudio:PROC
EXTRN	@__CheckForDebuggerJustMyCode@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_UninitUse:PROC
EXTRN	_map_view_flag:WORD
EXTRN	_main_volum_flg:BYTE
EXTRN	_snd_volum_flg:WORD
EXTRN	_swap_channal_flag:BYTE
EXTRN	_camera_coord_x_3:WORD
EXTRN	_camera_coord_y_5:WORD
EXTRN	_camera_coord_7_x:WORD
EXTRN	_camera_coord_9_y:WORD
EXTRN	_camera_z_coord:WORD
EXTRN	_main_volum:WORD
EXTRN	_snd_volum:WORD
_DATA	SEGMENT
COMM	?_OptionsStorage@?1??__local_stdio_printf_options@@9@9:QWORD							; `__local_stdio_printf_options'::`2'::_OptionsStorage
_DATA	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_C@_02JDPG@rb@
CONST	SEGMENT
??_C@_02JDPG@rb@ DB 'rb', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0DF@IOHDHJDL@SDL_mixer?5could?5not?5initialize?$CB@
CONST	SEGMENT
??_C@_0DF@IOHDHJDL@SDL_mixer?5could?5not?5initialize?$CB@ DB 'SDL_mixer c'
	DB	'ould not initialize! SDL_mixer Error: %s', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07IOKAONGO@?$CFs?5?$CFd?5?6@
CONST	SEGMENT
??_C@_07IOKAONGO@?$CFs?5?$CFd?5?6@ DB '%s %d ', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DF@ENFFBJEA@ERROR?3?5allocate?5channels?4Curren@
CONST	SEGMENT
??_C@_0DF@ENFFBJEA@ERROR?3?5allocate?5channels?4Curren@ DB 'ERROR: alloca'
	DB	'te channels.Current channels number is ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07EDGOICEI@?$CFs?5?$CFs?5?6@
CONST	SEGMENT
??_C@_07EDGOICEI@?$CFs?5?$CFs?5?6@ DB '%s %s ', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@FKLEPBBC@ERROR?3?5SDL?5init?5audio?4?5@
CONST	SEGMENT
??_C@_0BI@FKLEPBBC@ERROR?3?5SDL?5init?5audio?4?5@ DB 'ERROR: SDL init aud'
	DB	'io. ', 00H					; `string'
CONST	ENDS
; Function compile flags: /Odt
;	COMDAT __JustMyCode_Default
_TEXT	SEGMENT
__JustMyCode_Default PROC				; COMDAT
	push	ebp
	mov	ebp, esp
	pop	ebp
	ret	0
__JustMyCode_Default ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\FreeApoc\Apocalypse\UFOP\C_Sources\sound.c
;	COMDAT _get_volume_dist
_TEXT	SEGMENT
_v13$ = -92						; size = 4
_v12$ = -80						; size = 4
_v11$ = -68						; size = 4
_v10$ = -56						; size = 4
_x_y_shift$ = -44					; size = 4
_z_delta$ = -32						; size = 4
_y_delta$ = -20						; size = 4
_x_delta$ = -8						; size = 4
_x1$ = 8						; size = 2
_y1$ = 12						; size = 2
_z1$ = 16						; size = 2
_x2$ = 20						; size = 2
_y2$ = 24						; size = 2
_z2$ = 28						; size = 2
_get_volume_dist PROC					; COMDAT

; 503  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 288				; 00000120H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-96]
	mov	ecx, 24					; 00000018H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __2F24349B_sound@c
	call	@__CheckForDebuggerJustMyCode@4

; 504  :     int x_delta, y_delta, z_delta, x_y_shift,v10,v11,v12,v13;
; 505  :     
; 506  :     
; 507  :     if (z1 >= z2)

	movsx	eax, WORD PTR _z1$[ebp]
	movsx	ecx, WORD PTR _z2$[ebp]
	cmp	eax, ecx
	jl	SHORT $LN2@get_volume

; 508  :         z_delta = z1 - z2;

	movsx	eax, WORD PTR _z1$[ebp]
	movsx	ecx, WORD PTR _z2$[ebp]
	sub	eax, ecx
	mov	DWORD PTR _z_delta$[ebp], eax
	jmp	SHORT $LN3@get_volume
$LN2@get_volume:

; 509  :     else
; 510  :         z_delta = z2 - z1;

	movsx	eax, WORD PTR _z2$[ebp]
	movsx	ecx, WORD PTR _z1$[ebp]
	sub	eax, ecx
	mov	DWORD PTR _z_delta$[ebp], eax
$LN3@get_volume:

; 511  :     if (x2 <= x1)

	movsx	eax, WORD PTR _x2$[ebp]
	movsx	ecx, WORD PTR _x1$[ebp]
	cmp	eax, ecx
	jg	SHORT $LN4@get_volume

; 512  :         x_delta = x1 - x2;

	movsx	eax, WORD PTR _x1$[ebp]
	movsx	ecx, WORD PTR _x2$[ebp]
	sub	eax, ecx
	mov	DWORD PTR _x_delta$[ebp], eax
	jmp	SHORT $LN5@get_volume
$LN4@get_volume:

; 513  :     else
; 514  :         x_delta = x2 - x1;

	movsx	eax, WORD PTR _x2$[ebp]
	movsx	ecx, WORD PTR _x1$[ebp]
	sub	eax, ecx
	mov	DWORD PTR _x_delta$[ebp], eax
$LN5@get_volume:

; 515  :     if (y2 <= y1)

	movsx	eax, WORD PTR _y2$[ebp]
	movsx	ecx, WORD PTR _y1$[ebp]
	cmp	eax, ecx
	jg	SHORT $LN6@get_volume

; 516  :         y_delta = y1 - y2;

	movsx	eax, WORD PTR _y1$[ebp]
	movsx	ecx, WORD PTR _y2$[ebp]
	sub	eax, ecx
	mov	DWORD PTR _y_delta$[ebp], eax
	jmp	SHORT $LN7@get_volume
$LN6@get_volume:

; 517  :     else
; 518  :         y_delta = y2 - y1;

	movsx	eax, WORD PTR _y2$[ebp]
	movsx	ecx, WORD PTR _y1$[ebp]
	sub	eax, ecx
	mov	DWORD PTR _y_delta$[ebp], eax
$LN7@get_volume:

; 519  :     if (x_delta < y_delta)

	mov	eax, DWORD PTR _x_delta$[ebp]
	cmp	eax, DWORD PTR _y_delta$[ebp]
	jge	SHORT $LN8@get_volume

; 520  :     {
; 521  :         x_y_shift = y_delta;

	mov	eax, DWORD PTR _y_delta$[ebp]
	mov	DWORD PTR _x_y_shift$[ebp], eax

; 522  :     }

	jmp	SHORT $LN9@get_volume
$LN8@get_volume:

; 523  :     else
; 524  :     {
; 525  :         x_y_shift = x_delta;

	mov	eax, DWORD PTR _x_delta$[ebp]
	mov	DWORD PTR _x_y_shift$[ebp], eax

; 526  :         x_delta = y_delta;

	mov	eax, DWORD PTR _y_delta$[ebp]
	mov	DWORD PTR _x_delta$[ebp], eax
$LN9@get_volume:

; 527  :     }
; 528  :     v10 = ((2 * x_delta) + (4 * x_y_shift)) / 2;

	mov	eax, DWORD PTR _x_y_shift$[ebp]
	shl	eax, 2
	mov	ecx, DWORD PTR _x_delta$[ebp]
	lea	eax, DWORD PTR [eax+ecx*2]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	DWORD PTR _v10$[ebp], eax

; 529  :     v11 = 2 * z_delta;

	mov	eax, DWORD PTR _z_delta$[ebp]
	shl	eax, 1
	mov	DWORD PTR _v11$[ebp], eax

; 530  :     v12 = v10;

	mov	eax, DWORD PTR _v10$[ebp]
	mov	DWORD PTR _v12$[ebp], eax

; 531  :     if (v10 < v11)

	mov	eax, DWORD PTR _v10$[ebp]
	cmp	eax, DWORD PTR _v11$[ebp]
	jge	SHORT $LN10@get_volume

; 532  :     {
; 533  :         v10 = v11;

	mov	eax, DWORD PTR _v11$[ebp]
	mov	DWORD PTR _v10$[ebp], eax

; 534  :         v11 = v12;

	mov	eax, DWORD PTR _v12$[ebp]
	mov	DWORD PTR _v11$[ebp], eax
$LN10@get_volume:

; 535  :     }
; 536  :     v13 = (2 * v11) +(4 * v10);

	mov	eax, DWORD PTR _v10$[ebp]
	shl	eax, 2
	mov	ecx, DWORD PTR _v11$[ebp]
	lea	edx, DWORD PTR [eax+ecx*2]
	mov	DWORD PTR _v13$[ebp], edx

; 537  :     return v13 >> 2;

	mov	eax, DWORD PTR _v13$[ebp]
	sar	eax, 2

; 538  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 288				; 00000120H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_get_volume_dist ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\FreeApoc\Apocalypse\UFOP\C_Sources\sound.c
;	COMDAT _get_first_free_channel
_TEXT	SEGMENT
_i$1 = -8						; size = 4
_index$ = 8						; size = 4
_get_first_free_channel PROC				; COMDAT

; 490  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-12]
	mov	ecx, 3
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __2F24349B_sound@c
	call	@__CheckForDebuggerJustMyCode@4

; 491  :     for (int i = index; i < index + m_num_simultaneously_playing_channels; i++)

	mov	eax, DWORD PTR _index$[ebp]
	mov	DWORD PTR _i$1[ebp], eax
	jmp	SHORT $LN4@get_first_
$LN2@get_first_:
	mov	eax, DWORD PTR _i$1[ebp]
	add	eax, 1
	mov	DWORD PTR _i$1[ebp], eax
$LN4@get_first_:
	mov	eax, DWORD PTR _index$[ebp]
	add	eax, DWORD PTR _m_num_simultaneously_playing_channels
	cmp	DWORD PTR _i$1[ebp], eax
	jge	SHORT $LN3@get_first_

; 492  :     {
; 493  :         if (!Mix_Playing(i))

	mov	eax, DWORD PTR _i$1[ebp]
	push	eax
	call	_Mix_Playing
	add	esp, 4
	test	eax, eax
	jne	SHORT $LN5@get_first_

; 494  :         {
; 495  :             return i;

	mov	eax, DWORD PTR _i$1[ebp]
	jmp	SHORT $LN1@get_first_
$LN5@get_first_:

; 496  :         }
; 497  :     }

	jmp	SHORT $LN2@get_first_
$LN3@get_first_:

; 498  :     Mix_HaltChannel(index);

	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	call	_Mix_HaltChannel
	add	esp, 4

; 499  :     return index;

	mov	eax, DWORD PTR _index$[ebp]
$LN1@get_first_:

; 500  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_get_first_free_channel ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\FreeApoc\Apocalypse\UFOP\C_Sources\sound.c
;	COMDAT _get_balance
_TEXT	SEGMENT
_v5$ = -32						; size = 2
_v4$ = -20						; size = 2
_v3$ = -8						; size = 2
_x_pos$ = 8						; size = 2
_y_pos$ = 12						; size = 2
_get_balance PROC					; COMDAT

; 443  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-36]
	mov	ecx, 9
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __2F24349B_sound@c
	call	@__CheckForDebuggerJustMyCode@4

; 444  :     int16_t v3, v4, v5;   //v6,v7;
; 445  :     if (map_view_flag || x_pos < 0)

	movzx	eax, WORD PTR _map_view_flag
	test	eax, eax
	jne	SHORT $LN4@get_balanc
	movsx	eax, WORD PTR _x_pos$[ebp]
	test	eax, eax
	jge	SHORT $LN2@get_balanc
$LN4@get_balanc:

; 446  :     {
; 447  :         if (x_pos < 0)

	movsx	eax, WORD PTR _x_pos$[ebp]
	test	eax, eax
	jge	SHORT $LN5@get_balanc

; 448  :         {
; 449  :             v3 = 0;

	xor	eax, eax
	mov	WORD PTR _v3$[ebp], ax

; 450  :             if (x_pos == -13 || x_pos == -3)

	movsx	eax, WORD PTR _x_pos$[ebp]
	cmp	eax, -13				; fffffff3H
	je	SHORT $LN8@get_balanc
	movsx	eax, WORD PTR _x_pos$[ebp]
	cmp	eax, -3					; fffffffdH
	jne	SHORT $LN7@get_balanc
$LN8@get_balanc:

; 451  :                 v3 = 15;

	mov	eax, 15					; 0000000fH
	mov	WORD PTR _v3$[ebp], ax
$LN7@get_balanc:

; 452  :             if (x_pos == -14 || x_pos == -4)

	movsx	eax, WORD PTR _x_pos$[ebp]
	cmp	eax, -14				; fffffff2H
	je	SHORT $LN10@get_balanc
	movsx	eax, WORD PTR _x_pos$[ebp]
	cmp	eax, -4					; fffffffcH
	jne	SHORT $LN9@get_balanc
$LN10@get_balanc:

; 453  :                 v3 = -15;

	mov	eax, -15				; fffffff1H
	mov	WORD PTR _v3$[ebp], ax
$LN9@get_balanc:

; 454  :             if (x_pos == -11)

	movsx	eax, WORD PTR _x_pos$[ebp]
	cmp	eax, -11				; fffffff5H
	jne	SHORT $LN11@get_balanc

; 455  :             { 
; 456  :                 v5 = 0;

	xor	eax, eax
	mov	WORD PTR _v5$[ebp], ax

; 457  :                 return v5;

	movsx	eax, WORD PTR _v5$[ebp]
	jmp	$LN1@get_balanc
$LN11@get_balanc:

; 458  :             }
; 459  :         }

	jmp	SHORT $LN6@get_balanc
$LN5@get_balanc:

; 460  :         else
; 461  :         {
; 462  :             v3 = x_pos - (camera_coord_7_x + 40);

	movsx	eax, WORD PTR _x_pos$[ebp]
	movsx	ecx, WORD PTR _camera_coord_7_x
	add	ecx, 40					; 00000028H
	sub	eax, ecx
	mov	WORD PTR _v3$[ebp], ax
$LN6@get_balanc:

; 463  :         }
; 464  :     }

	jmp	SHORT $LN3@get_balanc
$LN2@get_balanc:

; 465  :     else
; 466  :     {
; 467  :         v3 = x_pos + camera_coord_y_5 - (camera_coord_x_3 + y_pos);

	movsx	eax, WORD PTR _x_pos$[ebp]
	movsx	ecx, WORD PTR _camera_coord_y_5
	add	eax, ecx
	movsx	edx, WORD PTR _camera_coord_x_3
	movsx	ecx, WORD PTR _y_pos$[ebp]
	add	edx, ecx
	sub	eax, edx
	mov	WORD PTR _v3$[ebp], ax
$LN3@get_balanc:

; 468  :     }
; 469  :     if (swap_channal_flag)

	movzx	eax, BYTE PTR _swap_channal_flag
	test	eax, eax
	je	SHORT $LN12@get_balanc

; 470  :         v3 = -v3;

	movsx	eax, WORD PTR _v3$[ebp]
	neg	eax
	mov	WORD PTR _v3$[ebp], ax
$LN12@get_balanc:

; 471  :     if (v3 >= 15)

	movsx	eax, WORD PTR _v3$[ebp]
	cmp	eax, 15					; 0000000fH
	jl	SHORT $LN13@get_balanc

; 472  :         v4 = 15;

	mov	eax, 15					; 0000000fH
	mov	WORD PTR _v4$[ebp], ax
	jmp	SHORT $LN14@get_balanc
$LN13@get_balanc:

; 473  :     else
; 474  :         v4 = v3;

	mov	ax, WORD PTR _v3$[ebp]
	mov	WORD PTR _v4$[ebp], ax
$LN14@get_balanc:

; 475  :     if (v4 <= -15)

	movsx	eax, WORD PTR _v4$[ebp]
	cmp	eax, -15				; fffffff1H
	jg	SHORT $LN15@get_balanc

; 476  :     {
; 477  :         v5 = -15;

	mov	eax, -15				; fffffff1H
	mov	WORD PTR _v5$[ebp], ax

; 478  :     }

	jmp	SHORT $LN16@get_balanc
$LN15@get_balanc:

; 479  :     else
; 480  :     {
; 481  :         if (v3 >= 15)

	movsx	eax, WORD PTR _v3$[ebp]
	cmp	eax, 15					; 0000000fH
	jl	SHORT $LN17@get_balanc

; 482  :             v3 = 15;

	mov	eax, 15					; 0000000fH
	mov	WORD PTR _v3$[ebp], ax
$LN17@get_balanc:

; 483  :         v5 = v3;

	mov	ax, WORD PTR _v3$[ebp]
	mov	WORD PTR _v5$[ebp], ax
$LN16@get_balanc:

; 484  :     }
; 485  :     return 2184 * v5 + v5;

	movsx	eax, WORD PTR _v5$[ebp]
	imul	eax, eax, 2184
	movsx	ecx, WORD PTR _v5$[ebp]
	add	eax, ecx
$LN1@get_balanc:

; 486  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_get_balance ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\FreeApoc\Apocalypse\UFOP\C_Sources\sound.c
;	COMDAT _load_raw_snd
_TEXT	SEGMENT
_size$1 = -32						; size = 4
_file$ = -20						; size = 4
_i$ = -8						; size = 4
_load_raw_snd PROC					; COMDAT

; 376  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-36]
	mov	ecx, 9
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __2F24349B_sound@c
	call	@__CheckForDebuggerJustMyCode@4

; 377  :     int i;
; 378  :     snd = (struct struct_sound*)malloc(215 * sizeof(struct struct_sound));

	mov	esi, esp
	push	14620					; 0000391cH
	call	DWORD PTR __imp__malloc
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _snd, eax

; 379  :     snd = &snd_raw;

	mov	DWORD PTR _snd, OFFSET _snd_raw

; 380  :     FILE* file;
; 381  :       
; 382  :     for (i = 0; i < 215; i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@load_raw_s
$LN2@load_raw_s:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN4@load_raw_s:
	cmp	DWORD PTR _i$[ebp], 215			; 000000d7H
	jge	$LN1@load_raw_s

; 383  :     {
; 384  :         file = fopen((snd + i)->sound_path, "rb");

	mov	esi, esp
	push	OFFSET ??_C@_02JDPG@rb@
	imul	eax, DWORD PTR _i$[ebp], 68
	add	eax, DWORD PTR _snd
	push	eax
	call	DWORD PTR __imp__fopen
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _file$[ebp], eax

; 385  : 
; 386  :         long size = _filelength(_fileno(file));

	mov	esi, esp
	mov	eax, DWORD PTR _file$[ebp]
	push	eax
	call	DWORD PTR __imp___fileno
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	push	eax
	call	DWORD PTR __imp___filelength
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _size$1[ebp], eax

; 387  :         raw_track[i] = (uint8_t*)malloc(sizeof(uint8_t) * size);

	mov	esi, esp
	mov	eax, DWORD PTR _size$1[ebp]
	push	eax
	call	DWORD PTR __imp__malloc
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR _raw_track[ecx*4], eax

; 388  :         if (raw_track[i])

	mov	eax, DWORD PTR _i$[ebp]
	cmp	DWORD PTR _raw_track[eax*4], 0
	je	SHORT $LN5@load_raw_s

; 389  :             fread(raw_track[i], size, 1, file);

	mov	esi, esp
	mov	eax, DWORD PTR _file$[ebp]
	push	eax
	push	1
	mov	ecx, DWORD PTR _size$1[ebp]
	push	ecx
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _raw_track[edx*4]
	push	eax
	call	DWORD PTR __imp__fread
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN5@load_raw_s:

; 390  :         (chunks_raw + i)->chunk_ptr = raw_track[i];

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 4
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _raw_track[ecx*4]
	mov	DWORD PTR _chunks_raw[eax+4], edx

; 391  :         (chunks_raw + i)->chunk_size = size;

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 4
	mov	ecx, DWORD PTR _size$1[ebp]
	mov	DWORD PTR _chunks_raw[eax+8], ecx

; 392  :         (chunks_raw + i)->bitrate = (snd + i)->bitrate;

	imul	eax, DWORD PTR _i$[ebp], 68
	mov	ecx, DWORD PTR _i$[ebp]
	shl	ecx, 4
	mov	edx, DWORD PTR _snd
	mov	ax, WORD PTR [edx+eax+52]
	mov	WORD PTR _chunks_raw[ecx], ax

; 393  :         (chunks_raw + i)->fsize = (snd + i)->fsize;

	imul	eax, DWORD PTR _i$[ebp], 68
	mov	ecx, DWORD PTR _i$[ebp]
	shl	ecx, 4
	mov	edx, DWORD PTR _snd
	mov	ax, WORD PTR [edx+eax+56]
	mov	WORD PTR _chunks_raw[ecx+12], ax

; 394  :         (chunks_raw + i)->max_vol = (snd + i)->max_vol;

	imul	eax, DWORD PTR _i$[ebp], 68
	mov	ecx, DWORD PTR _i$[ebp]
	shl	ecx, 4
	mov	edx, DWORD PTR _snd
	mov	ax, WORD PTR [edx+eax+62]
	mov	WORD PTR _chunks_raw[ecx+14], ax

; 395  :         fclose(file);

	mov	esi, esp
	mov	eax, DWORD PTR _file$[ebp]
	push	eax
	call	DWORD PTR __imp__fclose
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 396  :     }

	jmp	$LN2@load_raw_s
$LN1@load_raw_s:

; 397  : };

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_load_raw_snd ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\FreeApoc\Apocalypse\UFOP\C_Sources\sound.c
;	COMDAT _get_sound_volume
_TEXT	SEGMENT
_v7$ = -32						; size = 2
_v6$ = -20						; size = 2
_v5$ = -8						; size = 2
_x$ = 8							; size = 2
_y$ = 12						; size = 2
_z$ = 16						; size = 2
_max_volume$ = 20					; size = 2
_size$ = 24						; size = 2
_get_sound_volume PROC					; COMDAT

; 401  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-36]
	mov	ecx, 9
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __2F24349B_sound@c
	call	@__CheckForDebuggerJustMyCode@4

; 402  :     uint16_t v5,v6,v7;
; 403  : 
; 404  :     if (map_view_flag || x < 0)                

	movzx	eax, WORD PTR _map_view_flag
	test	eax, eax
	jne	SHORT $LN4@get_sound_
	movsx	eax, WORD PTR _x$[ebp]
	test	eax, eax
	jge	$LN2@get_sound_
$LN4@get_sound_:

; 405  :     {
; 406  :         if (x < 0)           

	movsx	eax, WORD PTR _x$[ebp]
	test	eax, eax
	jge	SHORT $LN5@get_sound_

; 407  :         {
; 408  :             v6 = max_volume;

	mov	ax, WORD PTR _max_volume$[ebp]
	mov	WORD PTR _v6$[ebp], ax

; 409  :         }

	jmp	$LN6@get_sound_
$LN5@get_sound_:

; 410  :         else
; 411  :         {
; 412  :             v7 = get_volume_dist(x, y, z, camera_coord_7_x + 40, camera_coord_9_y + 22, camera_z_coord);

	movzx	eax, WORD PTR _camera_z_coord
	push	eax
	movsx	ecx, WORD PTR _camera_coord_9_y
	add	ecx, 22					; 00000016H
	push	ecx
	movsx	edx, WORD PTR _camera_coord_7_x
	add	edx, 40					; 00000028H
	push	edx
	movzx	eax, WORD PTR _z$[ebp]
	push	eax
	movzx	ecx, WORD PTR _y$[ebp]
	push	ecx
	movzx	edx, WORD PTR _x$[ebp]
	push	edx
	call	_get_volume_dist
	add	esp, 24					; 00000018H
	mov	WORD PTR _v7$[ebp], ax

; 413  :             if (v7 <= 75 || size >= 500)

	movzx	eax, WORD PTR _v7$[ebp]
	cmp	eax, 75					; 0000004bH
	jle	SHORT $LN9@get_sound_
	movzx	eax, WORD PTR _size$[ebp]
	cmp	eax, 500				; 000001f4H
	jl	SHORT $LN7@get_sound_
$LN9@get_sound_:

; 414  :             {
; 415  :                 v6 = max_volume - v7 * (max_volume / 75);

	movzx	ecx, WORD PTR _max_volume$[ebp]
	movzx	esi, WORD PTR _v7$[ebp]
	movzx	eax, WORD PTR _max_volume$[ebp]
	cdq
	mov	edi, 75					; 0000004bH
	idiv	edi
	imul	esi, eax
	sub	ecx, esi
	mov	WORD PTR _v6$[ebp], cx

; 416  :                 if (v6 < 0)

	movzx	eax, WORD PTR _v6$[ebp]
	test	eax, eax
	jge	SHORT $LN10@get_sound_

; 417  :                     v6 = 0;

	xor	eax, eax
	mov	WORD PTR _v6$[ebp], ax
$LN10@get_sound_:

; 418  :             }

	jmp	SHORT $LN6@get_sound_
$LN7@get_sound_:

; 419  :             else
; 420  :             {
; 421  :                 v6 = 0;

	xor	eax, eax
	mov	WORD PTR _v6$[ebp], ax
$LN6@get_sound_:

; 422  :             }
; 423  :         }
; 424  :     }

	jmp	$LN3@get_sound_
$LN2@get_sound_:

; 425  :     else
; 426  :     {
; 427  :         v5 = get_volume_dist(x, y, z, camera_coord_x_3 + 16, camera_coord_y_5 + 16, camera_z_coord);

	movzx	eax, WORD PTR _camera_z_coord
	push	eax
	movsx	ecx, WORD PTR _camera_coord_y_5
	add	ecx, 16					; 00000010H
	push	ecx
	movsx	edx, WORD PTR _camera_coord_x_3
	add	edx, 16					; 00000010H
	push	edx
	movzx	eax, WORD PTR _z$[ebp]
	push	eax
	movzx	ecx, WORD PTR _y$[ebp]
	push	ecx
	movzx	edx, WORD PTR _x$[ebp]
	push	edx
	call	_get_volume_dist
	add	esp, 24					; 00000018H
	mov	WORD PTR _v5$[ebp], ax

; 428  :         if (v5 <= 75 || size >= 500)

	movzx	eax, WORD PTR _v5$[ebp]
	cmp	eax, 75					; 0000004bH
	jle	SHORT $LN13@get_sound_
	movzx	eax, WORD PTR _size$[ebp]
	cmp	eax, 500				; 000001f4H
	jl	SHORT $LN11@get_sound_
$LN13@get_sound_:

; 429  :         {
; 430  :             v6 = max_volume - v5 * (max_volume / 75);

	movzx	ecx, WORD PTR _max_volume$[ebp]
	movzx	esi, WORD PTR _v5$[ebp]
	movzx	eax, WORD PTR _max_volume$[ebp]
	cdq
	mov	edi, 75					; 0000004bH
	idiv	edi
	imul	esi, eax
	sub	ecx, esi
	mov	WORD PTR _v6$[ebp], cx

; 431  :             if (v6 < 0)

	movzx	eax, WORD PTR _v6$[ebp]
	test	eax, eax
	jge	SHORT $LN14@get_sound_

; 432  :                 v6 = 0;

	xor	eax, eax
	mov	WORD PTR _v6$[ebp], ax
$LN14@get_sound_:

; 433  :         }

	jmp	SHORT $LN3@get_sound_
$LN11@get_sound_:

; 434  :         else
; 435  :         {
; 436  :             v6 = 0;

	xor	eax, eax
	mov	WORD PTR _v6$[ebp], ax
$LN3@get_sound_:

; 437  :         }
; 438  :     }
; 439  :     return snd_volum * (main_volum * v6 / 1000) / 1000;

	movzx	ecx, WORD PTR _snd_volum
	movzx	eax, WORD PTR _main_volum
	movzx	edx, WORD PTR _v6$[ebp]
	imul	eax, edx
	cdq
	mov	esi, 1000				; 000003e8H
	idiv	esi
	imul	eax, ecx
	cdq
	mov	ecx, 1000				; 000003e8H
	idiv	ecx

; 440  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_get_sound_volume ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\FreeApoc\Apocalypse\UFOP\C_Sources\sound.c
;	COMDAT _sound
_TEXT	SEGMENT
$T1 = -281						; size = 1
$T2 = -269						; size = 1
_sample$3 = -68						; size = 4
_free_channel_index$4 = -56				; size = 4
_balance_shift$5 = -44					; size = 4
_r_balance$6 = -32					; size = 4
_l_balance$7 = -20					; size = 4
_ret_val$8 = -8						; size = 4
_raw_ind$ = 8						; size = 4
_x_pos$ = 12						; size = 2
_y_pos$ = 16						; size = 2
_z_pos$ = 20						; size = 2
_unc$ = 24						; size = 2
_sound	PROC						; COMDAT

; 318  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 288				; 00000120H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-96]
	mov	ecx, 24					; 00000018H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __2F24349B_sound@c
	call	@__CheckForDebuggerJustMyCode@4

; 319  :  
; 320  :     if (main_volum_flg && snd_volum_flg && raw_ind != -1)

	movzx	eax, BYTE PTR _main_volum_flg
	test	eax, eax
	je	$LN2@sound
	movzx	eax, WORD PTR _snd_volum_flg
	test	eax, eax
	je	$LN2@sound
	cmp	DWORD PTR _raw_ind$[ebp], -1
	je	$LN2@sound

; 321  :     {

	mov	BYTE PTR $T2[ebp], 0
	mov	BYTE PTR $T1[ebp], 0

; 322  :         int ret_val = 0;

	mov	DWORD PTR _ret_val$8[ebp], 0

; 323  :         //int freq = (chunks_raw + raw_ind)->bitrate;
; 324  : 
; 325  :         if (Mix_OpenAudio(22050, AUDIO_U8, 1, 512) < 0)//11050, AUDIO_U8, 2, 512

	push	512					; 00000200H
	push	1
	push	8
	push	22050					; 00005622H
	call	_Mix_OpenAudio
	add	esp, 16					; 00000010H
	test	eax, eax
	jge	SHORT $LN3@sound

; 326  :         {
; 327  :             printf("SDL_mixer could not initialize! SDL_mixer Error: %s\n", Mix_GetError());

	call	_SDL_GetError
	push	eax
	push	OFFSET ??_C@_0DF@IOHDHJDL@SDL_mixer?5could?5not?5initialize?$CB@
	call	_printf
	add	esp, 8

; 328  :             ret_val = 0;

	mov	DWORD PTR _ret_val$8[ebp], 0
$LN3@sound:

; 329  :         }
; 330  : 
; 331  :         int l_balance;
; 332  :         int r_balance;
; 333  : 
; 334  :         //get original scale //255
; 335  :         //32768
; 336  :         //main_volum_tmp = get_sound_volume(x_pos, y_pos, z_pos, (chunks_raw + raw_ind)->max_vol, (chunks_raw + raw_ind)->fsize) >> 8; // *255
; 337  :         main_volum_tmp = get_sound_volume(x_pos, y_pos, z_pos, 32768, (chunks_raw + raw_ind)->fsize) >> 8; // *255

	mov	eax, DWORD PTR _raw_ind$[ebp]
	shl	eax, 4
	movzx	ecx, WORD PTR _chunks_raw[eax+12]
	push	ecx
	push	32768					; 00008000H
	movzx	edx, WORD PTR _z_pos$[ebp]
	push	edx
	movzx	eax, WORD PTR _y_pos$[ebp]
	push	eax
	movzx	ecx, WORD PTR _x_pos$[ebp]
	push	ecx
	call	_get_sound_volume
	add	esp, 20					; 00000014H
	sar	eax, 8
	mov	WORD PTR _main_volum_tmp, ax

; 338  :         int balance_shift = get_balance(x_pos, y_pos);

	movzx	eax, WORD PTR _y_pos$[ebp]
	push	eax
	movzx	ecx, WORD PTR _x_pos$[ebp]
	push	ecx
	call	_get_balance
	add	esp, 8
	mov	DWORD PTR _balance_shift$5[ebp], eax

; 339  :         if (!balance_shift)

	cmp	DWORD PTR _balance_shift$5[ebp], 0
	jne	SHORT $LN4@sound

; 340  :         {
; 341  :             l_balance = MIX_MAX_BALANCE;

	mov	BYTE PTR $T2[ebp], 1
	mov	DWORD PTR _l_balance$7[ebp], 255	; 000000ffH

; 342  :             r_balance = MIX_MAX_BALANCE;

	mov	BYTE PTR $T1[ebp], 1
	mov	DWORD PTR _r_balance$6[ebp], 255	; 000000ffH

; 343  :         }

	jmp	SHORT $LN5@sound
$LN4@sound:

; 344  :         else if (balance_shift > 0)

	cmp	DWORD PTR _balance_shift$5[ebp], 0
	jle	SHORT $LN6@sound

; 345  :         {
; 346  :             l_balance = 0;

	mov	BYTE PTR $T2[ebp], 1
	mov	DWORD PTR _l_balance$7[ebp], 0

; 347  :             r_balance = balance_shift >> 7;

	mov	eax, DWORD PTR _balance_shift$5[ebp]
	sar	eax, 7
	mov	BYTE PTR $T1[ebp], 1
	mov	DWORD PTR _r_balance$6[ebp], eax

; 348  :         }

	jmp	SHORT $LN5@sound
$LN6@sound:

; 349  :         else if (balance_shift < 0)

	cmp	DWORD PTR _balance_shift$5[ebp], 0
	jge	SHORT $LN5@sound

; 350  :         {
; 351  :             r_balance = 0;

	mov	BYTE PTR $T1[ebp], 1
	mov	DWORD PTR _r_balance$6[ebp], 0

; 352  :             l_balance = (~balance_shift+1) >> 7;

	mov	eax, DWORD PTR _balance_shift$5[ebp]
	not	eax
	add	eax, 1
	sar	eax, 7
	mov	BYTE PTR $T2[ebp], 1
	mov	DWORD PTR _l_balance$7[ebp], eax
$LN5@sound:

; 353  :         }
; 354  :         int free_channel_index = get_first_free_channel(raw_ind);

	mov	eax, DWORD PTR _raw_ind$[ebp]
	push	eax
	call	_get_first_free_channel
	add	esp, 4
	mov	DWORD PTR _free_channel_index$4[ebp], eax

; 355  :         //ret_val |= Mix_Volume(free_channel_index, main_volum_tmp);
; 356  : 
; 357  : 
; 358  : 
; 359  :         ret_val |= Mix_SetPanning(free_channel_index, (uint8_t)l_balance, (uint8_t)r_balance);

	cmp	BYTE PTR $T1[ebp], 0
	jne	SHORT $LN10@sound
	push	OFFSET $LN11@sound
	call	__RTC_UninitUse
	add	esp, 4
$LN10@sound:
	cmp	BYTE PTR $T2[ebp], 0
	jne	SHORT $LN12@sound
	push	OFFSET $LN13@sound
	call	__RTC_UninitUse
	add	esp, 4
$LN12@sound:
	movzx	eax, BYTE PTR _r_balance$6[ebp]
	push	eax
	movzx	ecx, BYTE PTR _l_balance$7[ebp]
	push	ecx
	mov	edx, DWORD PTR _free_channel_index$4[ebp]
	push	edx
	call	_Mix_SetPanning
	add	esp, 12					; 0000000cH
	or	eax, DWORD PTR _ret_val$8[ebp]
	mov	DWORD PTR _ret_val$8[ebp], eax

; 360  :         Mix_Chunk* sample = Mix_QuickLoad_RAW((chunks_raw + raw_ind)->chunk_ptr, (chunks_raw + raw_ind)->chunk_size);

	mov	eax, DWORD PTR _raw_ind$[ebp]
	shl	eax, 4
	mov	ecx, DWORD PTR _chunks_raw[eax+8]
	push	ecx
	mov	edx, DWORD PTR _raw_ind$[ebp]
	shl	edx, 4
	mov	eax, DWORD PTR _chunks_raw[edx+4]
	push	eax
	call	_Mix_QuickLoad_RAW
	add	esp, 8
	mov	DWORD PTR _sample$3[ebp], eax

; 361  :         Mix_VolumeChunk(sample, MIX_MAX_VOLUME);

	push	128					; 00000080H
	mov	eax, DWORD PTR _sample$3[ebp]
	push	eax
	call	_Mix_VolumeChunk
	add	esp, 8

; 362  :         Mix_AllocateChannels(m_num_simultaneously_playing_channels * (raw_ind + 1));

	mov	eax, DWORD PTR _raw_ind$[ebp]
	add	eax, 1
	imul	eax, DWORD PTR _m_num_simultaneously_playing_channels
	push	eax
	call	_Mix_AllocateChannels
	add	esp, 4

; 363  : 
; 364  :         
; 365  :         ret_val |= Mix_Volume(free_channel_index, main_volum_tmp);

	movzx	eax, WORD PTR _main_volum_tmp
	push	eax
	mov	ecx, DWORD PTR _free_channel_index$4[ebp]
	push	ecx
	call	_Mix_Volume
	add	esp, 8
	or	eax, DWORD PTR _ret_val$8[ebp]
	mov	DWORD PTR _ret_val$8[ebp], eax

; 366  :  
; 367  :         ret_val |= Mix_PlayChannel(free_channel_index, sample, 0);

	push	-1
	push	0
	mov	eax, DWORD PTR _sample$3[ebp]
	push	eax
	mov	ecx, DWORD PTR _free_channel_index$4[ebp]
	push	ecx
	call	_Mix_PlayChannelTimed
	add	esp, 16					; 00000010H
	or	eax, DWORD PTR _ret_val$8[ebp]
	mov	DWORD PTR _ret_val$8[ebp], eax
$LN2@sound:

; 368  : 
; 369  :         //Mix_SetDistance(0, 1);  
; 370  :     }
; 371  :     return 1;

	mov	eax, 1

; 372  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 288				; 00000120H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN14@sound:
$LN13@sound:
	DB	108					; 0000006cH
	DB	95					; 0000005fH
	DB	98					; 00000062H
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	97					; 00000061H
	DB	110					; 0000006eH
	DB	99					; 00000063H
	DB	101					; 00000065H
	DB	0
$LN11@sound:
	DB	114					; 00000072H
	DB	95					; 0000005fH
	DB	98					; 00000062H
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	97					; 00000061H
	DB	110					; 0000006eH
	DB	99					; 00000063H
	DB	101					; 00000065H
	DB	0
_sound	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\FreeApoc\Apocalypse\UFOP\C_Sources\sound.c
;	COMDAT _sound_init
_TEXT	SEGMENT
_num_reserve_channels$ = -44				; size = 4
_num_channels$ = -32					; size = 4
_max_channels$ = -20					; size = 4
_ret_val$ = -8						; size = 4
_sound_init PROC					; COMDAT

; 290  :  {

	push	ebp
	mov	ebp, esp
	sub	esp, 240				; 000000f0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-48]
	mov	ecx, 12					; 0000000cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __2F24349B_sound@c
	call	@__CheckForDebuggerJustMyCode@4

; 291  :      int ret_val = 0;

	mov	DWORD PTR _ret_val$[ebp], 0

; 292  : 
; 293  :      if (SDL_Init(SDL_INIT_AUDIO))

	push	16					; 00000010H
	call	_SDL_Init
	add	esp, 4
	test	eax, eax
	je	SHORT $LN2@sound_init

; 294  :      {
; 295  :          printf("%s %s \n", "ERROR: SDL init audio. ", SDL_GetError());

	call	_SDL_GetError
	push	eax
	push	OFFSET ??_C@_0BI@FKLEPBBC@ERROR?3?5SDL?5init?5audio?4?5@
	push	OFFSET ??_C@_07EDGOICEI@?$CFs?5?$CFs?5?6@
	call	_printf
	add	esp, 12					; 0000000cH

; 296  :          ret_val |= -1;

	mov	DWORD PTR _ret_val$[ebp], -1
$LN2@sound_init:

; 297  :      }
; 298  :      m_num_simultaneously_playing_channels = 10;

	mov	DWORD PTR _m_num_simultaneously_playing_channels, 10 ; 0000000aH

; 299  :      int max_channels = 104 * m_num_simultaneously_playing_channels;

	imul	eax, DWORD PTR _m_num_simultaneously_playing_channels, 104
	mov	DWORD PTR _max_channels$[ebp], eax

; 300  :      int num_channels = Mix_AllocateChannels(max_channels);

	mov	eax, DWORD PTR _max_channels$[ebp]
	push	eax
	call	_Mix_AllocateChannels
	add	esp, 4
	mov	DWORD PTR _num_channels$[ebp], eax

; 301  :      int num_reserve_channels = Mix_ReserveChannels(max_channels);

	mov	eax, DWORD PTR _max_channels$[ebp]
	push	eax
	call	_Mix_ReserveChannels
	add	esp, 4
	mov	DWORD PTR _num_reserve_channels$[ebp], eax

; 302  :      if (num_channels != max_channels || num_reserve_channels != max_channels)

	mov	eax, DWORD PTR _num_channels$[ebp]
	cmp	eax, DWORD PTR _max_channels$[ebp]
	jne	SHORT $LN4@sound_init
	mov	eax, DWORD PTR _num_reserve_channels$[ebp]
	cmp	eax, DWORD PTR _max_channels$[ebp]
	je	SHORT $LN3@sound_init
$LN4@sound_init:

; 303  :      {
; 304  :          printf("%s %d \n", "ERROR: allocate channels.Current channels number is ", num_channels);

	mov	eax, DWORD PTR _num_channels$[ebp]
	push	eax
	push	OFFSET ??_C@_0DF@ENFFBJEA@ERROR?3?5allocate?5channels?4Curren@
	push	OFFSET ??_C@_07IOKAONGO@?$CFs?5?$CFd?5?6@
	call	_printf
	add	esp, 12					; 0000000cH

; 305  :          ret_val |= -1;

	mov	DWORD PTR _ret_val$[ebp], -1
$LN3@sound_init:

; 306  :      }
; 307  :      if (Mix_Volume(-1, MIX_MAX_VOLUME) != MIX_MAX_VOLUME)

	push	128					; 00000080H
	push	-1
	call	_Mix_Volume
	add	esp, 8
	cmp	eax, 128				; 00000080H
	je	SHORT $LN5@sound_init

; 308  :      {
; 309  :          ret_val |= -1;

	mov	DWORD PTR _ret_val$[ebp], -1
$LN5@sound_init:

; 310  :      }
; 311  : 
; 312  :      return ret_val;

	mov	eax, DWORD PTR _ret_val$[ebp]

; 313  :  }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 240				; 000000f0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_sound_init ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\FreeApoc\Apocalypse\UFOP\C_Sources\sound.c
;	COMDAT _close_sound
_TEXT	SEGMENT
_close_sound PROC					; COMDAT

; 542  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	mov	edi, ebp
	xor	ecx, ecx
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __2F24349B_sound@c
	call	@__CheckForDebuggerJustMyCode@4

; 543  :     //int i;
; 544  :    // for (i = 0; i < 215; i++)
; 545  :        // free(raw_track[i]);
; 546  :     //free(snd);
; 547  : 
; 548  :     
; 549  :    SDL_CloseAudio();

	call	_SDL_CloseAudio

; 550  :    SDL_QuitSubSystem(SDL_INIT_AUDIO);

	push	16					; 00000010H
	call	_SDL_QuitSubSystem
	add	esp, 4

; 551  :    Mix_CloseAudio();

	call	_Mix_CloseAudio

; 552  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_close_sound ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.19041.0\ucrt\stdio.h
;	COMDAT _printf
_TEXT	SEGMENT
__ArgList$ = -20					; size = 4
__Result$ = -8						; size = 4
__Format$ = 8						; size = 4
_printf	PROC						; COMDAT

; 956  :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-24]
	mov	ecx, 6
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __6DFAE8B8_stdio@h
	call	@__CheckForDebuggerJustMyCode@4

; 957  :         int _Result;
; 958  :         va_list _ArgList;
; 959  :         __crt_va_start(_ArgList, _Format);

	lea	eax, DWORD PTR __Format$[ebp+4]
	mov	DWORD PTR __ArgList$[ebp], eax

; 960  :         _Result = _vfprintf_l(stdout, _Format, NULL, _ArgList);

	mov	eax, DWORD PTR __ArgList$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR __Format$[ebp]
	push	ecx
	mov	esi, esp
	push	1
	call	DWORD PTR __imp____acrt_iob_func
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	eax
	call	__vfprintf_l
	add	esp, 16					; 00000010H
	mov	DWORD PTR __Result$[ebp], eax

; 961  :         __crt_va_end(_ArgList);

	mov	DWORD PTR __ArgList$[ebp], 0

; 962  :         return _Result;

	mov	eax, DWORD PTR __Result$[ebp]

; 963  :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_printf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.19041.0\ucrt\stdio.h
;	COMDAT __vfprintf_l
_TEXT	SEGMENT
__Stream$ = 8						; size = 4
__Format$ = 12						; size = 4
__Locale$ = 16						; size = 4
__ArgList$ = 20						; size = 4
__vfprintf_l PROC					; COMDAT

; 644  :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	mov	edi, ebp
	xor	ecx, ecx
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __6DFAE8B8_stdio@h
	call	@__CheckForDebuggerJustMyCode@4

; 645  :         return __stdio_common_vfprintf(_CRT_INTERNAL_LOCAL_PRINTF_OPTIONS, _Stream, _Format, _Locale, _ArgList);

	mov	esi, esp
	mov	eax, DWORD PTR __ArgList$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Locale$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Format$[ebp]
	push	edx
	mov	eax, DWORD PTR __Stream$[ebp]
	push	eax
	call	___local_stdio_printf_options
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	call	DWORD PTR __imp____stdio_common_vfprintf
	add	esp, 24					; 00000018H
	cmp	esi, esp
	call	__RTC_CheckEsp

; 646  :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__vfprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.19041.0\ucrt\corecrt_stdio_config.h
;	COMDAT ___local_stdio_printf_options
_TEXT	SEGMENT
___local_stdio_printf_options PROC			; COMDAT

; 90   :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	mov	edi, ebp
	xor	ecx, ecx
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __A2143F22_corecrt_stdio_config@h
	call	@__CheckForDebuggerJustMyCode@4

; 91   :         static unsigned __int64 _OptionsStorage;
; 92   :         return &_OptionsStorage;

	mov	eax, OFFSET ?_OptionsStorage@?1??__local_stdio_printf_options@@9@9 ; `__local_stdio_printf_options'::`2'::_OptionsStorage

; 93   :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
___local_stdio_printf_options ENDP
_TEXT	ENDS
END
